package com.eknm;

import com.eknm.Main;
import javafx.stage.Stage;
import org.junit.Assert;
import org.junit.Before;
import org.loadui.testfx.utils.FXTestUtils;
import org.testfx.framework.junit.ApplicationTest;
/*
5,00000647e+9983
 1,e+9999
 1,e-14
 1,e-9999
 9,999999999999999e+9999

*/

import java.util.Random;

public class Test extends ApplicationTest {
    private RobotTest robotTest;
    public static String MAX_VALUE_DIV10_MS = "1000000000000000 ^2 ^2 ^2 ^2 ^2 ^2  ^2 ^2 ^2 MS C 1000000000000000 ^2 ^2 ^2 ^2 ^2  ^2 ^2 * MR = MS CE " +
            " 1000  ^2 ^2 ^2 ^2 ^2  ^2 ^2 * 1000000000 * 100000 = * MR = MS " +
            " MR * 9,999999999999999 = MS C MR / 9,999999999999999 = / 100000000 = / 100000000 = * 5  =  + MR = MS CE ";
    public static String MIN_VALUE_WITH_OUT_MS = "0,00000000000001 ^2 ^2 ^2 ^2 ^2 ^2  ^2 ^2 ^2 * 0,00000000000001" +
            "  ^2 ^2 ^2 ^2 ^2 ^2  ^2  *  0,0001 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 = * 0,0000000000001 = * 0,01 = ";
    public static String MIN_VALUE_MS = MIN_VALUE_WITH_OUT_MS + " MS C";


    public static String MAX_VALUE_MINUS_ONE_MS = MAX_VALUE_DIV10_MS + " MR - 1 = * 10  + 9 =  MS C ";
    public static String MAX_VALUE_MINUS_MIN = MAX_VALUE_MINUS_ONE_MS + " C " + MIN_VALUE_WITH_OUT_MS + " ± + 1 + MR = MS";
    public static String MAX_RES = "9,999999999999999e+9999";
    public static String MAX_RES_DIV10 = "9,999999999999999e+9998";
    public static String OVERFLOW = "Переполнение";
    public static String valueSqrtOfMax = "1000000000000000 * 10000 =  ^2 * 10 = ^2 ^2 ^2 ^2 * 10 = ^2 ^2 ^2  =";
    public static String MIN_ANSWER = "1,e-9999";
    public static String MIN_WITH_OUT_E = "0,0000000000000001";
    public static final String DATA_ZERO_DIVISION = "Деление на ноль невозможно".replaceAll(" ", "");



    @Before
    public void setUpClass() throws Exception {
        ApplicationTest.launch(Main.class);

    }


    @org.junit.Test
    public void myMaxDataTest() {


//maximum data With  */

        verifyCE(MAX_VALUE_MINUS_ONE_MS + " MR ", MAX_RES);

        verify(MAX_VALUE_MINUS_MIN, "1,e+10000");
        verifyCE(" MS  C " + MIN_VALUE_WITH_OUT_MS + " + MR = ", OVERFLOW);

        verify(MAX_VALUE_MINUS_MIN + " / 2 = MS", "5,e+9999");
        verify(" C " + MIN_VALUE_WITH_OUT_MS + "  + 2  * MR =", OVERFLOW);
        verifyCE(" C 2  * MR =", "1,e+10000");


        verify(MAX_VALUE_MINUS_MIN + " / 100000000 = MS", "1,e+9992");
        verifyCE(" C " + MIN_VALUE_WITH_OUT_MS + "  + 100000000  * MR =", OVERFLOW);

        verify(MAX_VALUE_MINUS_MIN + " / 500000 = MS", "2,e+9994");
        verifyCE(" C " + MIN_VALUE_WITH_OUT_MS + "  + 500000  * MR =", OVERFLOW);

        //maximum data With +
        verifyCE(" MC  " + MAX_VALUE_MINUS_ONE_MS + " MR + 1 =", OVERFLOW);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + " 1 + MR  =", OVERFLOW);
        verifyCE(MAX_VALUE_DIV10_MS + " MR * 5 = MS " + "MR - 0,500000000001 = + MR  = ", MAX_RES);
        verifyCE(MAX_VALUE_DIV10_MS + " MR * 5 = MS " + "MR  + MR  = ", OVERFLOW);
        verifyCE(MAX_VALUE_DIV10_MS + " MR * 2 = MS " + "  MR * 4 = - 1  + MR   = ", MAX_RES);
        verifyCE(MAX_VALUE_DIV10_MS + " MR * 2 = MS " + " MR * 4  + MR  = ", OVERFLOW);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + "MR ±  +  1 ±  =", OVERFLOW);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + " 1 ± + MR ±   =", OVERFLOW);
        verify(MAX_VALUE_DIV10_MS + " MR * 5 = MS " + "MR ± + 1 = + MR ±  = ", "-" + MAX_RES);
        verifyCE("MR ± + MR ± = ", OVERFLOW);
        verify(MAX_VALUE_DIV10_MS + " MR * 2 = MS " + " MR ±  * 4 = + 1  + ± MR   = ", MAX_RES);
        verifyCE(" MR ±  * 4  + ± MR  = ", OVERFLOW);
        //////
        ////////////////////////////MaxDataWith -
        ////////////////////////////
        verifyCE(MAX_VALUE_MINUS_ONE_MS + "MR ± - 1  =", OVERFLOW);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + " 1 ± - MR  =", OVERFLOW);

        verify(MAX_VALUE_DIV10_MS + " MR * 5 = MS " + " MR ± + 1 = - MR  = ", "-" + MAX_RES);
        verifyCE("MR ± - MR  = ", OVERFLOW);

        verify(MAX_VALUE_DIV10_MS + " MR * 5 = MS " + "MR ± + 1 = - MR  = ", "-" + MAX_RES);
        verifyCE("MR  - MR ±   = ", OVERFLOW);

        verify(MAX_VALUE_DIV10_MS + "MR ± * 2 = MS " + "  MR  * 4 = + 1  - MR ± =", "-" + MAX_RES);
        verifyCE(" MR * 4  - MR ±  = ", OVERFLOW);

        verifyCE(MAX_VALUE_MINUS_ONE_MS + "MR   -  1 ±  =", OVERFLOW);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + " 1 ± - MR    =", OVERFLOW);

        verify(MAX_VALUE_DIV10_MS + " MR * 5 = MS " + "MR  - 1 = - MR ±  = ", MAX_RES);
        verifyCE("MR - MR ± = ", OVERFLOW);

        verify(MAX_VALUE_DIV10_MS + " MR * 2 = MS " + " MR   * 4 = - 1  - ± MR   = ", "-" + MAX_RES);
        verifyCE(" MR   * 4  - ± MR  = ", OVERFLOW);

        /////1/x
        verifyCE(MAX_VALUE_DIV10_MS + " MR  /x /x ", "9,999999999999999e+9998");
        verifyCE(MIN_VALUE_WITH_OUT_MS + " /x /x ", MIN_ANSWER);
        verify(MIN_VALUE_WITH_OUT_MS + " * 1000 = /x ", "1,e+9996");
        verifyCE(" /x  ", "1,e-9996");
        verify(MIN_VALUE_WITH_OUT_MS + "  /x ", "1,e+9999");
        verifyCE(" /x  ", "1,e-9999");

        /// ^2
        verify(MAX_VALUE_MINUS_ONE_MS + " MR √ ", "1,e+5000");
        verify(" ^2 ", MAX_RES);
        verify(" √ + 1 = ^2 ", OVERFLOW);
        verify(MAX_VALUE_DIV10_MS + " MR √ ", "3,162277660168379e+4999");
        verify(" ^2 ", MAX_RES);

    }

    @org.junit.Test
    public void myMinDataTest() {
        verify(MIN_VALUE_MS + " MR  ", MIN_ANSWER);
        verify(" 0.0000000000000001 =  ± + 1  =", "0,9999999999999999");
        verifyCE(" * MR ", MIN_ANSWER);
        verifyCE(MIN_VALUE_MS + " 0.9999999999999999  = * MR = ", OVERFLOW);
        verifyCE(MIN_VALUE_MS + " 0.0000000000000001  ± + 1 = * MR = ", OVERFLOW);


        verifyCE(MIN_VALUE_MS + "  0.9999999999999999 =  * MR = ", OVERFLOW);
        verifyCE(MIN_VALUE_MS + "  0.9999999999999999 * 0,1 =  * MR = ", OVERFLOW);
        verifyCE(MIN_VALUE_MS + "  0.9999999999999999  - 0,1 ^2 ^2 ^2 ^2 ^2  =  * MR = ", OVERFLOW);
        verifyCE(MIN_VALUE_MS + "  0.9999999999999999  + 0,1 ^2 ^2 ^2 ^2 ^2  =  * MR = ", MIN_ANSWER);
        verifyCE(MIN_VALUE_MS + " 0.0000000000000001 * 0.1 = ± + 1 = * MR = ", MIN_ANSWER);


        verifyCE(MIN_VALUE_MS + " MR / 1.00000000001 =", OVERFLOW);
        verifyCE(MIN_VALUE_MS + " MR * 0.99999999999999 =", OVERFLOW);
        verifyCE(MIN_VALUE_MS + " 1 - MR = * MR =", MIN_ANSWER);
        verifyCE(MIN_VALUE_MS + " MR ± + 1 = * MR = ", MIN_ANSWER);

        /////
        ///min in Progress
        verifyCE(MIN_VALUE_MS + " MR * 0,999 =", OVERFLOW);
        verifyCE(MIN_VALUE_MS + " MR * 0,9999999999999 =", OVERFLOW);
        verifyCE(MIN_VALUE_MS + " CE 0,1 * MR =", OVERFLOW);
        verifyCE(MIN_VALUE_MS + " 0,1 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ± + 1 = * MR =", MIN_ANSWER);
        verifyCE(MIN_VALUE_MS + " 0,1 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 * 4213123 ^2 ^2 ^2 ± + 1 = * MR =", MIN_ANSWER);
        verifyCE(MIN_VALUE_MS + " MR * 2000 = MS / 8000000000 =  ± + 0,0000000125 = * MR = ", OVERFLOW);

        verifyCE(MIN_VALUE_MS + " MR =", MIN_ANSWER);
        verifyCE(MIN_VALUE_MS + " MR * 20 * 0,0499999999 =", OVERFLOW);
        verifyCE(MIN_VALUE_MS + " MR * 20 * 0,05  =", MIN_ANSWER);
        verifyCE(MIN_VALUE_MS + " MR * 20 * 0,04  =", OVERFLOW);

        verifyCE(MIN_VALUE_MS + " MR * 100 = MS / 100 =  ± + 0,01 = * MR = ", MIN_ANSWER);
        ///// ^2
        verify(MIN_VALUE_MS + " MR √ ", "3,162277660168379e-5000");
        verify(" ^2 ", MIN_ANSWER);
        verify(" √ * 0,9999999999999 = ^2 ", "0");

    }

    @org.junit.Test
    public void myDataTest() {
        verifyCE(MAX_VALUE_MINUS_ONE_MS + " MR ", "9,999999999999999e+9999");
        verify(MAX_VALUE_MINUS_ONE_MS + " MR +0,99999999999999999999 =", MAX_RES);
        verifyCE("+ 0,000000000000001 = ", MAX_RES);
        verify("0,000000000000001 / 10 * 9 = ± + 1 =", "0.9999999999999991");
        verify("0,000000000000001 / 10  = ± + 1 =", "0.9999999999999999");
        verifyCE(MAX_VALUE_DIV10_MS + "MR", "1,e+9999");
        verifyCE(MAX_VALUE_DIV10_MS + " MR * 9 - 0,5  - 0.1 ^2 ^2 ^2 ^2 = + MR =", MAX_RES);
        verifyCE(MAX_VALUE_DIV10_MS + " 0,0000000000000001 / 10 * 9,9999999999999  + 0,5 = ±  + MR =", "9,999999999999999e+9998");
        verifyCE(MAX_VALUE_DIV10_MS + " 0,000000000000001 / 10   + 0,5 = ±  + MR =", MAX_RES_DIV10);
        verifyCE(MAX_VALUE_DIV10_MS + " 0,000000000000001 / 10   + 0,5 = ±  + MR = ±", "-" + MAX_RES_DIV10);
        verifyCE(MAX_VALUE_DIV10_MS + " MR * 9  = + MR =", OVERFLOW);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + " MR =", MAX_RES);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + " MR = ±", "-" + MAX_RES);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + "MR + 0,499999999999  =", MAX_RES);
        verifyCE(MAX_VALUE_MINUS_ONE_MS + " MR + 1    =", OVERFLOW);
        /////////////// 10+
        verify(MAX_VALUE_DIV10_MS + "MR - 1 = * 10 =", MAX_RES);
        verify("+ 9 =", MAX_RES);
        verifyCE("+ 1 =", OVERFLOW);
        ////////////////////////////////////10-
        verify(MAX_VALUE_DIV10_MS + "MR ± + 1 = * 10 =", "-" + MAX_RES);
        verify("+ 9 ± =", "-" + MAX_RES);
        verifyCE("- 1  =", OVERFLOW);
        verifyCE(MAX_VALUE_DIV10_MS + "MR ±  * 10 =", OVERFLOW);
        /////////////
        verify(MAX_VALUE_MINUS_ONE_MS + "MR", MAX_RES);
        verifyCE(MAX_VALUE_DIV10_MS + "MR ± * 10 = ", OVERFLOW);

    }

    //////////////////////////////////
/////////////////////////////////


    @org.junit.Test
    public void plusTest() {

        //something + zero
        verify("0 ± + 0 =", "0");
        verify("0  + 0 ^2 ± =", "0");
        verify("0 + 0 =", "0");
        verify("0 + 1273123,12313 =", "1273123,12313");
        verify("0 + 12555552913 =", "12555552913");
        verify("5 + 0 =", "5");
        verify("0 + 2 ± =", "-2");

        ////////////////positive result
        verify("02 + 2 =", "2");
        verify("68 + 88 =", "156");
        verify("952 +   792 =", "1744");
        verify("4400 + 1472 =", "5872");
        verify("83424 + 38560 =", "121984");
        verify("686848 + 164288 =", "851136");
        verify("7283200 + 5129472 =", "12412672");
        verify("81884160 + 38740480 =", "120624640");
        verify("268832256 + 997945856 =", "1266778112");
        verify("8450350080 + 7111997440 =", "15562347520");
        verify("16449512448 + 20203424768 =", "36652937216");
        ////members with different signs
        verify("6 + 2 ±  =", "4");
        verify("72 + 44 ±  =", "28");
        verify("408 + 136 ±  =", "272");
        verify("5056 + 3536 ±  =", "1520");
        verify("89856 + 5632 ±  =", "84224");
        verify("686976 + 162368 ±  =", "524608");
        verify("5617792 + 4662528 ±  =", "955264");
        verify("60679680 + 26460672 ±  =", "34219008");
        verify("643768832 + 477682688 ±  =", "166086144");
        verify("6112595968 + 5074071552 ±  =", "1038524416");
        verify("44981780480 + 28765746176 ±  =", "16216034304");

        verify("6256 ± + 7728   =", "1472");
        verify("22624 ± + 41024   =", "18400");
        verify("41344 ± + 954688   =", "913344");
        verify("5193344 ± + 6040704   =", "847360");
        verify("85661184 ± + 86447104   =", "785920");
        verify("123843072 ± + 705316352   =", "581473280");
        verify("1591456768 ± + 2620341760   =", "1028884992");
        verify("75003902976 ± + 82368872960   =", "7364969984");
        ///fractional
        verify("29.22015  + 29.22015 ± =", "0");
        verify("777.304 ± + 777.304  =", "0");
        verify("9867.472  + 9867.472 ± =", "0");
        verify("85.139755  + 85.139755 ± =", "0");
        verify("542.0581  + 542.0581 ± =", "0");
        verify("3608.3513  + 3608.3513 ± =", "0");

        ///negative result
        verify("5392 ±  + 9040 ±  =", "-14432");
        verify("33152 ±  + 61760 ±  =", "-94912");
        verify("714368 ±  + 245888 ±  =", "-960256");
        verify("7602688 ±  + 7076480 ±  =", "-14679168");
        verify("28422400 ±  + 64332032 ±  =", "-92754432");
        verify("107663104 ±  + 501849600 ±  =", "-609512704");
        verify("1915672576 ±  + 516135936 ±  =", "-2431808512");
        verify("26875130368 ±  + 70789724160 ±  =", "-97664854528");

        /////////////////////////positive fractional  result
        verify("6.7457542 ± + 8.819323  =", "2,0735688");
        verify("523.40295  + 447.01556  =", "970,41851");
        verify("5205.2744  + 342.5267  =", "5547,8011");
        verify("3.5273452  + 0.46180314  =", "3,98914834");
        verify("895.3976  + 412.112 ± =", "483,2856");
        verify("24.64216 ± + 96.542694  =", "71,900534");
        verify("4902.2407  + 2909.164  =", "7811,4047");
        verify("691.07837 ± + 891.3119  =", "200,23353");
        verify("1233.6274 ± + 6687.209  =", "5453,5816");
        verify("2 ± + 9.787418  =", "7,787418");
        verify("7291.4233  + 4.829293  =", "7296,252593");
        ////////negative fractional result
        verify("49.18217 ± + 45.878353 ± =", "-95,060523");
        verify("239.88336  + 728.7878 ± =", "-488,90444");
        verify("30 ± + 48.84246 ± =", "-78,84246");
        verify("75.11107 ± + 94.711815 ± =", "-169,822885");
        verify("4042.314 ± + 2749.577  =", "-1292,737");
        verify("0.36636096  + 5.2859254 ± =", "-4,91956444");
        verify("8.56667  + 611.1463 ± =", "-602,57963");
        verify("4.178589 ± + 7.2748356 ± =", "-11,4534246");
        verify("36 ± + 11.418674  =", "-24,581326");

///////////////////////////////
///////////////////////////////
        ///from max to zero
        ///from max to zero
        ///from max to zero

        verify(MAX_VALUE_DIV10_MS + " MR + MR =", "2,e+9999");
        verifyCE(MAX_VALUE_DIV10_MS + " MR / 2 + MR =", "1,5e+9999");
        verify(MAX_VALUE_DIV10_MS + " MR + MR + MR + MR + MR  =", "2,e+9999");
        verify(MAX_VALUE_DIV10_MS + " MR * 2  MR + MR + MR  =", "1,e+9999");
        verify(MAX_VALUE_DIV10_MS + " MR + MR + MR + MR + MR + MR + MR + MR + MR - 1 + MR   =", "9,999999999999999e+9999");

        verify(MAX_VALUE_DIV10_MS + " MR / 40  =", "2,5e+9997");
        verify("+ 1293821839 =", "2,5e+9997");
        verify("+ 7485745457 =", "2,5e+9997");
        verify("+ 4 =", "2,5e+9997");
        verify("+ 412983928 =", "2,5e+9997");
        verify("+ MR  =", "1,025e+9999");
        verify("+ 1293819238 =", "1,025e+9999");
        verify("+ 67677676 =", "1,025e+9999");
        verify("+ MR + 123 =", "2,025e+9999");

        verify(MAX_VALUE_DIV10_MS + " MR / 4000000  =", "2,5e+9992");
        verify("+ 12831237 = MS ", "2,5e+9992");
        verify("MR +  MR =", "5,e+9992");
        verify("+ MR + MR + MR + MR + MR + MR  =", "2,e+9993");

        verify("1000000 ^2 ^2 ^2 ^2 ^2 ^2  = MS", "1,e+384");
        verify("+ 12831237 = MS ", "1,e+384");
        verify("MR +  MR =", "2,e+384");
        verify("+ MR + MR + MR + MR + MR + MR +MR  =", "8,e+384");
        verify(" MR + 2 =", "1,e+384");


        verify("1000000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2  = MS", "1,e+3072");
        verify("+ MR + MR + MR + MR + MR  = ", "1,e+3072");
        verify(" + 1603607483 ±  = ", "1,e+3072");

        verify("1000000 ^2 ^2 ^2 ± = MS ", "-1,e+48");
        verify("+ MR + MR  =", "-3,e+48");
        verify(" + 1298414578 =", "-3,e+48");
        verify("+ MR + MR + MR + MR  =", "-7,e+48");
        verify(" =", "-8,e+48");

        verify("1000000 ^2  ^2  = MS ", "1,e+24");
        verify("+ MR + MR + MR + MR  =", "5,e+24");
        verify("+ MR + MR  =", "7,e+24");
        verify(" =", "8,e+24");
        verify(" + 338671021 =", "8,e+24");

///////////////////////////////
///////////////////////////////From 1 to 0
///////////////////////////////
        verify(" 0.01 ^2  ^2 ^2 MS ", MIN_WITH_OUT_E);
        verify("+ MR + MR + MR + MR  =", "0,0000000000000005");
        verify("+ MR + MR + MR + MR + MR + MR  =", "0,0000000000000011");

        verify(" 0.01 ^2  ^2 ^2  ^2  ^2  ^2  ^2 MS ", "1,e-256");
        verify("+ MR + MR + MR + MR  =", "5,e-256");
        verify("+ MR + MR + MR  =", "8,e-256");

        verify(" 0.12323 ^2  ^2 ^2  ^2  ^2 ^2  ^2  ^2 MS ", "1,67267209302024152e-233");
        verify("+ MR + MR + MR + MR + MR  =", "1,00360325581214491e-232");
        verify("+ MR + MR + MR + MR  =", "1,67267209302024152e-232");
        verify("+ MR + MR + MR + MR + MR  =", "2,50900813953036228e-232");
        verify("+ MR + MR + MR + MR + MR + MR  =", "3,51261139534250719e-232");
        verify("+ MR + MR + MR + MR  =", "4,18168023255060379e-232");
        verify("+ MR + MR + MR + MR  =", "4,8507490697587004e-232");

        verify(" 0.12567 ^2  ^2 ^2  ^2  ^2 ^2  ^2  ^2 ^2 ^2 ^2 MS ", "1,68402170851555467e-1845");
        verify("+ MR + MR + MR + MR + MR + MR  =", "1,17881519596088827e-1844");
        verify("+ MR + MR + MR  =", "1,68402170851555467e-1844");

        verify(" 0.13445 ^2  ^2 ^2  ^2  ^2 ^2  ^2  ^2 ^2 ^2 ^2 ^2 MS ", "3,8464816679934324e-3570");
        verify("+ MR + MR + MR + MR + MR + MR + MR  =", "3,07718533439474592e-3569");
        verify("+ MR + MR + MR + MR + MR  =", "5,00042616839146212e-3569");

        verify(" 0.1222222 ^2  ^2 ^2  ^2  ^2 ^2  ^2  ^2  ^2 ^2 ^2 ^2 ^2 MS ", "8,58208135596357661e-7479");
        verify("+ MR + MR + MR + MR + MR  =", "5,14924881357814597e-7478");
        verify("+ MR + MR + MR  =", "7,72387322036721895e-7478");
        verify("+ MR + MR + MR + MR  =", "1,11567057627526496e-7477");

        verify(MIN_VALUE_MS, "1,e-9999");
        verify("+ MR + MR + MR + MR + MR  =", "6,e-9999");
        verify("+ MR + MR + MR + MR + MR + MR + MR  =", "1,3e-9998");
        verify("+ MR + MR + MR + MR  =", "1,7e-9998");
    }

    @org.junit.Test
    public void minusTest() {

///////////////////////////////////////////
/////////////positive result
///////////////////////////////////////////
        verify("8.519229  - 4.331786  =", "4,187443");
        verify("63.045105  - 0.049915314  =", "62,995189686");
        verify("311.5099  - 245.62622  =", "65,88368");
        verify("5517.482  - 4086.1313  =", "1431,3507");
        verify("8.111041  - 6.173314  =", "1,937727");
        verify("68.10493  - 12.07782  =", "56,02711");
        verify("971.20215  - 327.65833  =", "643,54382");
        verify("442.10266  - 386.6632  =", "55,43946");
        verify("817.63715  - 758.20636  =", "59,43079");
        verify("8548.029  - 8510.486  =", "37,543");
        verify("5.730367  - 0.07820606  =", "5,65216094");
        verify("89.07129  - 9.7519455  =", "79,3193445");
        verify("997.50806  - 957.19116  =", "40,3169");
        verify("7349.691  - 4977.685  =", "2372,006");
        /////positive result with different signs
        verify("8.800655  - 1.1059933 ± =", "9,9066483");
        verify("56.26204  - 26.705399 ± =", "82,967439");
        verify("723.8875  - 396.62958 ± =", "1120,51708");
        verify("3111.3687  - 1554.6382 ± =", "4666,0069");
        /////
        verify("4.4455056 ± - 7.765556 ± =", "3,3200504");
        verify("36.82807 ± - 88.22775 ± =", "51,39968");
        verify("740.1725 ± - 948.0392 ± =", "207,8667");
        verify("2726.6177 ± - 4443.958 ± =", "1717,3403");
        verify("2.777401 ± - 4.258622 ± =", "1,481221");
        verify("46.053047 ± - 90.63181 ± =", "44,578763");
        verify("225.78632 ± - 501.2282 ± =", "275,44188");
        verify("4719.673 ± - 9483.079 ± =", "4763,406");
        verify("1.5022306 ± - 8.75024 ± =", "7,2480094");
        verify("32.838696 ± - 37.158894 ± =", "4,320198");
        verify("551.26276 ± - 596.89276 ± =", "45,63");
        verify("3091.0234 ± - 9030.708 ± =", "5939,6846");

        ///zero as answer
        verify("9.450937  - 9.450937  =", "0");
        verify("19.4506937 ±  - 19.4506937 ± =", "0");
        verify("96.56392  - 96.56392  =", "0");
        verify("926.56392 ±  - 926.56392 ± =", "0");
        verify("932.6556  - 932.6556  =", "0");
        verify("3087.652 ± - 3087.652 ± =", "0");
        verify("8743847 ^2 ± - 8743847 ^2 ± =", "0");

        ///negative result
        verify("53.91166  - 89.77102  =", "-35,85936");
        verify("53.520935  - 558.496  =", "-504,975065");
        verify("2314.1465  - 5387.6875  =", "-3073,541");
        verify("12619.773  - 90931.59  =", "-78311,817");
        verify("104967.75  - 425625.94  =", "-320658,19");
        verify("4.705742  - 66.97618  =", "-62,270438");
        verify("701.1244  - 953.3915  =", "-252,2671");
        verify("3081.2314  - 9430.494  =", "-6349,2626");
        verify("32881.67  - 83364.86  =", "-50483,19");
        verify("382284.5  - 545331.0  =", "-163046,5");

        ///negative - positive
        verify("61.272614 ± - 10.146317  =", "-71,418931");
        verify("303.8902 ± - 34.60254  =", "-338,49274");
        verify("6484.9893 ± - 2435.166  =", "-8920,1553");
        verify("65184.18 ± - 47973.523  =", "-113157,703");
        verify("851387.56 ± - 1548.5625  =", "-852936,1225");
        verify("53.293953 ± - 1.0919342  =", "-54,3858872");
        verify("825.5807 ± - 819.7919  =", "-1645,3726");
        verify("2511.5234 ± - 874.4226  =", "-3385,946");
        verify("59716.27 ± - 48875.113  =", "-108591,383");
        verify("643843.9 ± - 423917.25  =", "-1067761,15");
        ///
        verify("60.136024 ± - 39.202232 ± =", "-20,933792");
        verify("977.3553 ± - 753.48016 ± =", "-223,87514");
        verify("9367.695 ± - 589.54785 ± =", "-8778,14715");
        verify("95173.58 ± - 54661.39 ± =", "-40512,19");
        verify("657646.0 ± - 430847.75 ± =", "-226798,25");
        verify("80.766685 ± - 34.909325 ± =", "-45,85736");
        verify("628.10754 ± - 83.69385 ± =", "-544,41369");
        verify("9243.49 ± - 821.82324 ± =", "-8421,66676");
        verify("63042.12 ± - 25759.887 ± =", "-37282,233");
        verify("763546.06 ± - 241645.62 ± =", "-521900,44");


/////////////////////
/////////////////////From max ->0
/////////////////////


        verify(MAX_VALUE_DIV10_MS + "MR / 40 = MS ", "2,5e+9997");
        verify("- MR = - MR  =", "-2,5e+9997");
        verify(" =", "-5,e+9997");
        verify("- MR - MR - MR - MR - MR - MR  =", "-2,e+9998");


        verify("1000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2  ^2 ^2 + 1000 = ^2  = MS    = ", "1,e+6144");
        verify("- MR - MR - MR  =", "-2,e+6144");
        verify("- MR - MR - MR  =", "-5,e+6144");
        verify(" + 131211179 =", "-5,e+6144");
        verify("- MR - MR - MR - MR - MR - MR  =", "-1,1e+6145");
        verify("- MR - MR - MR - MR - MR - MR  =", "-1,7e+6145");
        verify(" + 1914121082 =", "-1,7e+6145");

        verify("1000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2  ^2 = MS   = ", "1,e+1536");
        verify("- MR - MR - MR - MR  =", "-3,e+1536");
        verify(" =", "-4,e+1536");
        verify(" + 1423008607 =", "-4,e+1536");

        verify("1000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2  = MS - 6457547 ^2  = ", "1,e+768");
        verify("- MR - MR  =", "-1,e+768");
        verify("- MR - MR - MR - MR - MR - MR  =", "-7,e+768");
        verify(" + 166577830 =", "-7,e+768");

        verify("1000000 ^2 ^2  = MS  - 4547457457 = ", "9,999999999999955e+23");
        verify(" + 130454776 =", "9,999999999999956e+23");
        verify("- MR - MR - MR - MR - MR  =", "-4,000000000000004e+24");
        verify("- MR - MR - MR - MR  =", "-8,000000000000004e+24");

        verify("1000000 ^2 ^2 ^2 ± = MS  / 4 - MR = ", "7,5e+47");
        verify(" + 1331075737 =", "7,5e+47");
        verify(" + 499110169 =", "7,5e+47");
        verify("- MR  =", "1,75e+48");
        verify(" + 1089132418 =", "1,75e+48");

///////////////////////////////////////////
///////////////////////////////////////////From 0.1^1000 ->1
///////////////////////////////////////////
        verify(MIN_VALUE_MS + "MR * 12 = MS", "1,2e-9998");
        verify("- MR - MR - MR - MR - MR  =", "-4,8e-9998");
        verify("- MR - MR - MR  =", "-8,4e-9998");
        verify("- MR - MR - MR - MR - MR  =", "-1,44e-9997");

        verify("0,0000000000005551 ^2 ^2 ^2 ^2 ^2  ^2  ^2 ^2 ^2 MS 0,000000000000001 ^2 ^2 ^2  ^2 ^2  ^2 ^2 ^2 ^2 * 23 =", "2,3e-7679");
        verify("- MR - MR - MR - MR  =", "-4,78704323757506768e-6275");
        verify("- MR - MR - MR - MR  =", "-9,57408647515013536e-6275");
        verify("- MR - MR - MR - MR - MR - MR  =", "-1,67546513315127369e-6274");

        verify("0,0000000000005551 ^2 ^2 ^2 ^2  ^2  ^2 ^2 ^2 MS 0,000000000000001 ^2 ^2 ^2  ^2  ^2 ^2 ^2 ^2 * 15 =", "1,5e-3839");
        verify("- MR - MR - MR - MR - MR - MR  =", "-2,07565385211926916e-3137");
        verify("- MR - MR - MR  =", "-3,11348077817890375e-3137");
        verify("- MR - MR - MR - MR - MR - MR - MR  =", "-5,53507693898471777e-3137");

        verify("0,000000000000001 ^2 ^2 ^2 ^2 ^2 ^2 MS 0,000000000000001 ^2 ^2 ^2 ^2 ^2 ^2 * 15 =", "1,5e-959");
        verify("- MR - MR - MR - MR - MR  =", "1,e-959");
        verify("- MR - MR - MR - MR - MR  =", "5,e-960");
        verify("- MR - MR - MR  =", "2,e-960");
        verify("- MR - MR - MR - MR - MR  =", "-3,e-960");

        verify("0,0000000000005551 ^2 ^2 ^2  MS * 25 =", "2,2505251657398126e-97");
        verify("- MR - MR - MR  =", "1,98046214585103509e-97");
        verify("- MR - MR - MR - MR - MR - MR  =", "1,44033610607348006e-97");
        verify("- MR - MR - MR - MR  =", "1,08025207955511005e-97");
        verify("- MR - MR - MR - MR - MR - MR  =", "5,40126039777555023e-98");
///////////////////////////////////////////
    }

    @org.junit.Test
    public void multiplyTest() {
//////////
////////// 0 result
//////////
        verify("0  * 0  =", "0");
        verify("25.119919 ± * 0  =", "0");
        verify("136.85388  * 0  =", "0");
        verify("9709.705  * 0  =", "0");
        verify("83250.83 ± * 0  =", "0");
        verify("48.53098  * 0  =", "0");
        verify("349.83008  * 0  =", "0");
        verify("3742.6892  * 0  =", "0");
        verify("56739.28 ± * 0  =", "0");
        verify("0  * 16910.414 ± =", "0");
        verify("0  * 801608.94 ± =", "0");
        verify("0  * 346401.34  =", "0");
        verify("0  * 9275849.0 ± =", "0");
        verify("0  * 4.7649088348 ± =", "0");
        verify("0  * 331.011233989  =", "0");
        verify("0  * 551.180095745559  =", "0");

/////////////////////////////////
/////////////////////////////////+ fractal result
////////////////////////////////
        verify("41.057728  * 22.77465  =", "935,0753849952");
        verify("333.7036  * 333.70355  =", "111358,07596778");
        verify("1617.3992  * 1617.399  =", "2615979,8486808");
        verify("1768.9465  * 1768.9453  =", "3129169,59712645");
        verify("96.1202  * 83.63621  =", "8039,129232442");
        verify("964.50525  * 637.0123  =", "614401,707664575");
        verify("200.4348  * 200.43481  =", "40174,111055388");
        verify("87853.805  * 43159.383  =", "3791716018,002315");
        //
        verify("83.71955 ± * 20.402222 ± =", "1708,0648448401");
        verify("7.525137 ± * 11.3503065 ± =", "85,4126114044905");
        verify("595.38324 ± * 9.509114 ± =", "5661,56710284936");
        verify("6963.534 ± * 9710.177 ± =", "67617147,685518");
        verify("75668.836 ± * 54214.137 ± =", "4102320641,534532");
        verify("9.419695 ± * 58.3225 ± =", "549,3801616375");
        verify("140.074 ± * 323.1871 ± =", "45270,1098454");
        verify("7262.3257 ± * 4952.538 ± =", "35966943,9976266");
        verify("90188.8 ± * 65966.68 ± =", "5949455709,184");

//////////
//////////- fractal result
//////////

        verify("55.018032 ± * 5.0363398  =", "-277,0895042792736");
        verify("906.1486 ± * 946.70386  =", "-857854,377353596");
        verify("5461.804 ± * 7757.51  =", "-42369999,14804");
        verify("12495.784 ± * 72438.42  =", "-905174849,62128");
        verify("78.01513 ± * 31.478355  =", "-2455,78795751115");
        verify("682.944 ± * 727.8906  =", "-497108,5179264");
        verify("9518.476 ± * 3642.2744  =", "-34668901,4618144");
        verify("47644.617 ± * 81453.24  =", "-3880808423,20908");
//
        verify("30.91446  * 51.288574 ± =", "-1585,55856938004");
        verify("975.2977  * 831.68524 ± =", "-811140,701695948");
        verify("773.13806  * 2026.4529 ± =", "-1566727,863787374");
        verify("37718.53  * 16406.434 ± =", "-618826573,02202");
        verify("21.438204  * 51.140797 ± =", "-1096,366838808588");
        verify("638.85297  * 98.13236 ± =", "-62692,1496391092");
        verify("7361.161  * 3253.9692 ± =", "-23952991,1702412");
        verify("60429.016  * 88679.875 ± =", "-5358837585,253");
        //
        //random   integer data
        //
        verify("1376451061  * 279444035  =", "3,846410384658711e+17");
        verify("860501906  * 550748350 ± =", "-4,739200049013551e+17");
        verify("640096241  * 1889900315  =", "1,209718087496216e+18");
        verify("2016607617 ± * 760087052  =", "-1,532797338646275e+18");
        verify("780545013 ± * 756011778  =", "-5,901012230871631e+17");
        verify("1154537696  * 1219378735 ± =", "-1,407818715258295e+18");
        verify("1203397317 ± * 109564722  =", "-1,318498924926509e+17");
        verify("169294663  * 586181103  =", "9,923733228935329e+16");
        verify("926716754  * 1219803165 ± =", "-1,130412029587726e+18");
        verify("1337288897  * 659120691  =", "8,814347818572678e+17");
        verify("53697109  * 57736769  =", "3100297578300821");
        verify("228772462 ± * 1283826070 ± =", "2,937040508136843e+17");
        verify("1120386821  * 1866146828 ± =", "-2,090806312142154e+18");
        verify("1571607116 ± * 115294420  =", "-1,811975309070927e+17");
        verify("2054285957 ± * 742765863 ± =", "1,525853481699886e+18");
        verify("397736157  * 1467028948 ± =", "-5,834904559852728e+17");
        verify("986643012  * 1674448123 ± =", "-1,652082539514466e+18");
        verify("39082633 ± * 1127998557 ± =", "4,408515362776058e+16");
        verify("2147483647  * 362862598  =", "7,792414953129349e+17");
        verify("1998423003 ± * 2147483647  =", "-4,291580718731132e+18");
        verify("929330350  * 624305310 ± =", "-5,801858722491585e+17");

        //////////////////////
        ////////////////////From Max -> 1
        //////////////////////
        verify(MAX_VALUE_DIV10_MS + "MR / 400 = MS ", "2,5e+9996");
        verify("* 2 * 2  =", "1,e+9997");
        verify("* 2 * 2 * 2 * 2 * 2 * 2  =", "6,4e+9998");
        verify("* 2 * 2 * 2  =", "5,12e+9999");

        verify(MAX_VALUE_DIV10_MS + "MR / 1000000000 = MS ", "1,e+9990");
        verify("* 2  =", "2,e+9990");
        verify(" * 22 =", "4,4e+9991");
        verify(" * 22 =", "9,68e+9992");
        verify(" * 2 =", "1,936e+9993");
        verify("* 2 =", "3,872e+9993");

        verify("10000000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 * 100000 = MS", "1,e+7173");
        verify(" * 62 =", "6,2e+7174");
        verify(" * 132 =", "8,184e+7176");
        verify(" * 62 =", "5,07408e+7178");
        verify(" * 32 =", "1,6237056e+7180");
        verify(" * 42 =", "6,81956352e+7181");
        verify(" * 112 =", "7,6379111424e+7183");

        verify("10000000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2   = MS * 40  = ", "4,e+1793");
        verify(" * 62 =", "2,48e+1795");
        verify(" * 102 =", "2,5296e+1797");
        verify(" * 112 =", "2,833152e+1799");
        verify(" * 72 =", "2,03986944e+1801");
        verify(" * 62 =", "1,2647190528e+1803");
        verify(" * 92 =", "1,163541528576e+1805");

        verify("10000000 ^2 ^2 ^2 ^2 ^2  = MS  - 4547457457 = ", "1,e+224");
        verify(" * 12 =", "1,2e+225");
        verify(" * 92 =", "1,104e+227");
        verify(" * 2 =", "2,208e+227");
        verify(" * 122 =", "2,69376e+229");
        verify(" * 122 =", "3,2863872e+231");
        verify(" * 82 =", "2,694837504e+233");

        verify("1000000 ^2 ^2  = MS  - 4547457457 = ", "9,999999999999955e+23");
        verify(" * 12 =", "1,199999999999995e+25");
        verify(" * 62 =", "7,439999999999966e+26");
        verify("* 2 * 2  =", "2,975999999999986e+27");
        verify("* 2 * 2 * 2  =", "2,380799999999989e+28");
        verify(" * 22 =", "5,237759999999976e+29");
        verify(" * 52 =", "2,723635199999988e+31");
/////////////////////////////////
////////////////////////////////from min -> 1
/////////////////////////////////
        verify(MIN_VALUE_MS, "1,e-9999");
        verify(" * 72026507 =", "7,2026507e-9992");
        verify(" * 1047416505 =", "7,5441752229298035e-9983");
        verify(" * 831600600 =", "6,27374064189355835e-9974");
        verify(" * 410109857 =", "2,57292287750205542e-9965");
        verify(" * 664073177 =", "1,70860906943877177e-9956");

        verify(MIN_VALUE_MS + " 1000000000000 ^2 ^2 ^2   * MR =", "1,e-9903");
        verify(" * 623366225 =", "6,23366225e-9895");
        verify(" * 576408624 =", "3,593136680003244e-9886");
        verify(" * 1906145571 =", "6,84904156858582782e-9877");

        verify(MIN_VALUE_MS + " 1000000000000 ^2 ^2 ^2 ^2 ^2   * MR =", "1,e-9615");
        verify(" * 833248127 =", "8,33248127e-9607");
        verify(" * 1485833706 =", "1,23806815255796866e-9597");

        verify(MIN_VALUE_MS + " 1000000000000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 * MR =", "1,e-6927");
        verify(" * 134813785 =", "1,34813785e-6919");
        verify(" * 1167831182 =", "1,5743974188644387e-6910");

        verify(" 0.1111111111 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ", "2,64655643089427153e-3909");
        verify(" * 54175292 =", "1,43377967438174981e-  3901");
        verify(" * 801725895 =", "1,14949829267651694e-3892");
        verify(" * 999451069 =", "1,14886729742921973e-3883");

        verify(" 0.24 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2   ", "2,16925952306810319e-635");
        verify(" * 154493005 =", "3,35135422343658082e-627");
        verify(" * 1878308373 =", "6,29487669876984259e-618");
        verify(" * 1855149455 =", "1,16779370770150727e-608");

        verify(" 0.01 ^2  ^2 ^2 ^2 ^2 ^2 ^2  ", "1,e-256");
        verify(" * 1742707788 =", "1,742707788e-247");
        verify(" * 82998154 =", "1,44641529365423352e-239");
        verify(" * 1050242244 =", "1,51908644376334117e-230");

        verify(" 0.01 ^2  ^2 ^2  ", MIN_WITH_OUT_E);
        verify(" * 833684551 =", "8,33684551e-8");
        verify(" * 748318350 =", "62,386144762481085");
        verify(" * 1074587862 =", "67039393918,737047");

    }


    @org.junit.Test
    public void divisionTest() {
        //////////////////////
        //0
        verify("0  / 5897.875 ± =", "0");
        verify("0  / 29013.844 ± =", "0");
        verify("0  / 714535.8  =", "0");
        verify("0  / 13441.9375 ± =", "0");
        verify("0  / 70227.125 ± =", "0");
        verify("0  / 614337.75  =", "0");
        //
        ///////UNCERTAINTY
        //
      //  verify("0 / 0  =", TypeOfCalculationException.UNCERTAINTY.getValue().replaceAll(" ", ""));
        //   verify("0 ^2 / 0  =", TypeOfCalculationException.UNCERTAINTY.getValue().replaceAll(" ", ""));
        //    verify("0 ^2 / 0  ^2 =", TypeOfCalculationException.UNCERTAINTY.getValue().replaceAll(" ", ""));
        //"Делениенаноль"
        //"Делениенаноль"
        verify("246313.38  / 0  =", DATA_ZERO_DIVISION);
        verify("379826.56  / 0 ^2 =", DATA_ZERO_DIVISION);
        verify("66156.63 ± / 0  =", DATA_ZERO_DIVISION);
        verify("225170 / 0  =", DATA_ZERO_DIVISION);
        verify("51964.125 / 0  =", DATA_ZERO_DIVISION);
        verify("627667.9  / 0 ^2 =", DATA_ZERO_DIVISION);
        //////////////////////////
        //////////////////////////
        //////////////////////////Integer
        verify("CE 8930320 ± / 5180 ± =", "1724");
        verify("31847228  / 4759  =", "6692");
        verify("12390780 ± / 1940 ± =", "6387");
        verify("17619295  / 9115  =", "1933");
        verify("7970084  / 7753  =", "1028");
        verify("49015714  / 6787  =", "7222");
        verify("16543783 ± / 2357 ± =", "7019");
        verify("3567820  / 3116  =", "1145");
        verify("4570320  / 1644  =", "2780");
        verify("34612053  / 4237  =", "8169");
        verify("8694792  / 7356  =", "1182");

        verify("67499202  / 9249 ± =", "-7298");
        verify("41187556 ± / 8314  =", "-4954");
        verify("27137418 ± / 4983  =", "-5446");
        verify("14525475  / 7325 ± =", "-1983");
        verify("4655084  / 692 ± =", "-6727");
        verify("3841138 ± / 6946  =", "-553");
        verify("40279107  / 4313 ± =", "-9339");
        verify("24690336  / 7491 ± =", "-3296");
        ///////////////
        ///////////////fractional number
        ///////////////

        verify("4.47  / 2.625  =", "1,702857142857143");
        verify("67602.13  / 65913.086  =", "1,025625321199496");
        verify("647291.3  / 94724.56  =", "6,833405190797402");
        verify("4517197.5  / 1070419.0  =", "4,220027391143094");
        verify("75947.78  / 56426.016  =", "1,345970979060439");
        verify("665111.2  / 562523.06  =", "1,182371439137091");
        verify("9842654.0  / 1878324.0  =", "5,240125771698599");
        verify("54658.88  / 1206.5078  =", "45,30337889237019");
        verify("705418.75  / 315065.88  =", "2,238956341448335");
        verify("3306377.8  / 2108617.8  =", "1,568030868372637");

        verify("801300.3 ± / 18424.312 ± =", "43,491463887498214");
        verify("740546.44 ± / 48447.75 ± =", "15,285466094916689");
        verify("567692.06 ± / 47511.75 ± =", "11,948456118749572");
        verify("648850.25 ± / 27587.5 ± =", "23,519719075668328");
        verify("315074.53 ± / 12548.281 ± =", "25,108979468980652");
        verify("654523.75 ± / 52383.375 ± =", "12,494875521098058");

        //////////
        //////////fractional minus res
        verify("785823.0 ± / 83526.69  =", "-9,408046697408936");
        verify("379134.97 ± / 51353.406  =", "-7,382859279090466");
        verify("399930.47 ± / 9889.656  =", "-40,43927008179051");
        verify("464724.88 ± / 22159.25  =", "-20,97204914426255");
        verify("700545.8 ± / 77080.19  =", "-9,088532345340612");
        verify("835563.6 ± / 64775.5  =", "-12,89937707929696");


        verify("93895.04  / 81197.27 ± =", "-1,156381735494309");
        verify("674977.6  / 55805.688 ± =", "-12,09513983592497");
        verify("642589.6  / 51964.125 ± =", "-12,36602367498731");
        verify("730038.56  / 66433.31 ± =", "-10,98904389981472");
        verify("497346.34  / 91447.16 ± =", "-5,438619854350862");
        verify("94678.41  / 27642.281 ± =", "-3,425130147544626");

////////////////////////////
////////////////////////////fractional with fractional res < 1
////////////////////////////
        verify("2.625  / 4.47  =", "0,587248322147651");
        verify("57.286713  / 495.30746  =", "0,1156588939726448");
        verify("21008.625  / 278788.47  =", "0,0753568646508229");
        verify("69693.75  / 844509.2  =", "0,0825257439468984");
        verify("81443.75  / 777409.6  =", "0,1047629846608532");
        verify("65756.94  / 931825.0  =", "0,0705679070640947");
        verify("37832.312  / 875783.2  =", "0,0431982618529335");
        verify("8056.25  / 915640.94  =", "0,0087984816406309");
        ////
        verify("53731.688 ± / 903734.75  =", "-0,059455153185157");
        verify("16456.25 ± / 765937.2  =", "-0,021485116534358");
        verify("78539.34 ± / 170301.28  =", "-0,461178800300268");
        verify("36607.438 ± / 800539.06  =", "-0,045728484503929");
        verify("92997.5 ± / 841314.4  =", "-0,110538343335143");
        verify("63522.844 ± / 486099.16  =", "-0,130678777556415");
        //////
        verify("0.5064051  / 3.0842557 ± =", "-0,164190375006845");
        verify("0.32795763  / 1.7999454 ± =", "-0,182204210194376");
        verify("2.7570953  / 52.141598 ± =", "-0,052877077146734");
        verify("76.26789  / 96.49081 ± =", "-0,790416102839224");
        verify("228.82373  / 672.8767 ± =", "-0,340067846011015");
        verify("8.015625  / 533.45197 ± =", "-0,015025954445346");
        verify("774.39307  / 7582.1724 ± =", "-0,102133403086429");
        verify("3949.7515  / 5649.108 ± =", "-0,699181445991119");


        /////////////////////
        ////////////////////From max to 1
        ////////////////////
        verify(MAX_VALUE_MINUS_ONE_MS + "MR / 3 MS =", "9,999999999999999e+9999");
        verify(" / 122 =", "8,196721311475409e+9997");
        verify(" / 32 =", "2,561475409836065e+9996");
        verify(" / 62 =", "4,131411951348493e+9994");
        verify(" / 122 =", "3,38640323881024e+9992");
        verify(" / 42 =", "8,062864854310095e+9990");
        verify(" / 102 =", "7,904769465009897e+9988");


        verify("10000000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 * 100000 = MS", "1,e+7173");
        verify(" / 1355771336 =", "7,375875071605733e+7163");
        verify(" / 474807008 =", "1,553446968416636e+7155");
        verify(" / 125239925 =", "1,240376795512003e+7147");
        verify(" / 1072582307 =", "1,156439731866659e+7138");
        verify(" / 1196690550 =", "9,663648901269081e+7128");
        verify(" / 2027906843 =", "4,765331767889834e+7119");
        verify(" / 691663981 =", "6,889663042739584e+7110");


        verify("1000000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2  * 100000 = MS", "1,e+3077");
        verify(" / 1790794102 =", "5,584114884470398e+3067");
        verify(" / 1508616963 =", "3,701479581249013e+3058");
        verify(" / 952379604 =", "3,886559062901785e+3049");
        verify(" / 1889568857 =", "2,056849660970987e+3040");
        verify(" / 1981933736 =", "1,037799409541403e+3031");
        verify(" / 420142532 =", "2,470112712943337e+3022");
        verify(" / 889033927 =", "2,778423452610642e+3013");
        verify(" / 1660996606 =", "1,672744810298933e+3004");


        verify("10000 ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2   * 100000 = MS", "1,e+1029");
        verify(" / 1259982422 =", "7,936618658637128e+1019");
        verify(" / 1556143550 =", "5,100184143446874e+1010");
        verify(" / 668967417 =", "7,623964955301962e+1001");
        verify(" / 1460805673 =", "5,219013792330722e+992");
        verify(" / 1316493 =", "3,964330833761153e+986");
        verify(" / 445326186 =", "8,902083368080118e+977");
        verify(" / 1777441339 =", "5,008369712548988e+968");
        verify(" / 1281801458 =", "3,90728976105517e+959");


        verify("10000 ^2 ^2 ^2  * 100000 = MS", "1,e+37");
        verify(" / 1347835862 =", "7,419301030587952e+27");
        verify(" / 1615251045 =", "4,593280439938023e+18");
        verify(" / 727231963 =", "6316114628,6663188");
        verify(" / 572847150 =", "11,025828842242331");

        //////////////////////////
        //////////////////////////from 0 -> 1
        verify(MIN_VALUE_MS + " * 50000 =", "5,e-9995");
        verify(" / 9 =", "5,55556e-9996");
        verify(" / 26 =", "2,1368e-9997");
        verify(" / 4 =", "5,342e-9998");
        verify(" / 26 =", "2,05e-9999");
        verify(" / 15 =", "Переполнение");

        verify("0,005684  ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2  ^2 ^2 ^2 ^2    =", "1,15629239760090217e-9197");
        verify(" / 13004 =", "8,89182095971164389e-9202");
        verify(" / 60895 =", "1,46018900726030772e-9206");
        verify(" / 49555 =", "2,94660277925599379e-9211");
        verify(" / 36327 =", "8,11132980773527622e-9216");

        verify("0,00666666  ^2 ^2 ^2 ^2 ^2 ^2 ^2 ^2  ^2 ^2  ^2   =", "2,3131937937017694e-4457");
        verify(" / 45735 =", "5,05781959921672547e-4462");
        verify(" / 42783 =", "1,18220311787783126e-4466");
        verify(" / 46333 =", "2,55153587697285144e-4471");
        verify(" / 56900 =", "4,48424582947777055e-4476");
        verify(" / 16767 =", "2,67444732479141799e-4480");

        verify("0,005554  ^2 ^2 ^2 ^2 ^2 ^2 ^2   ^2  ^2 ^2     =", "2,99513515184979347e-2310");
        verify(" / 66963 =", "4,47282103825962617e-2315");
        verify(" / 45349 =", "9,86310842192689181e-2320");
        verify(" / 41914 =", "2,35317755927062361e-2324");
        verify(" / 31837 =", "7,39132945714302105e-2329");
        verify(" / 44285 =", "1,66903679736773649e-2333");

        verify("0,0012653  ^2 ^2 ^2 ^2 ^2 ^2 ^2   ^2   =", "1,45056788516867026e-742");
        verify(" / 989 =", "1,46670160279946437e-745");
        verify(" / 233 =", "6,29485666437538357e-748");
        verify(" / 27 =", "2,33142839421310502e-749");
        verify(" / 84 =", "2,77550999311083932e-751");

        verify("0,00012  ^2 ^2 ^2 ^2 ^2 =", "3,41821891871668521e-126");
        verify(" / 602 =", "5,67810451614067311e-129");
        verify(" / 444 =", "1,2788523685001516e-131");
        verify(" / 612 =", "2,08962805310482288e-134");
        verify(" / 652 =", "3,20495100169451362e-137");
    }

    @org.junit.Test
    public void powerTest() {
        verify("0 ^2 =", "0");
        /////////////////////
        /////////////////////
        verify("100000000 ^2  =", "1,e+16");
        verify("100000001 ^2  =", "1,00000002e+16");
        verify("213812832 ^2  =", "4,571592712786022e+16");
        verify("99999999999999 ^2  =", "9,9999999999998e+27");
        verifyCE("100000000 - 1 =  ^2  ", "9999999800000001");

        verifyCE("100000000 - 0,0001 =  ^2  ", "9999999999980000");
        verifyCE("100000000 - 0,00000001 =  ^2  ", "9999999999999998");
        verifyCE("100000000 - 0,00000000001 =  ^2  ", "1,e+16");

        verify("0,3162277660168379 * 0,00000001  = ", "3,162277660168379e-9");
        verifyCE("MS ^2  ", "9,999999999999998e-18");

        /////////////////////
        /////////////////////subject area
        /////////////////////
        verify("9 ^2  =", "81");
        verify("7 ^2  =", "49");
        verify("90 ^2  =", "8100");
        verify("13 ^2  =", "169");
        verify("852 ^2  =", "725904");
        verify("260 ^2  =", "67600");
        verify("9326 ^2  =", "86974276");
        verify("8395 ^2  =", "70476025");
        verify("15493 ^2  =", "240033049");
        verify("72576 ^2  =", "5267275776");
        verify("779435 ^2  =", "607518919225");
        verify("821607 ^2  =", "675038062449");
        verify("9361034 ^2  =", "87628957549156");
        verify("2558864 ^2  =", "6547784970496");
        verify("55325583 ^2  =", "3060920134289889");
        verify("48880778 ^2  =", "2389330457885284");
        verify("162491326 ^2  =", "2,640343102523828e+16");
        verify("208254073 ^2  =", "4,336975892108933e+16");
        verify("1045434029 ^2  =", "1,092932308991173e+18");
        verify("941738783 ^2  =", "8,868719354063211e+17");
        verify("1461315583 ^2  =", "2,13544323311863e+18");
        verify("1764425703 ^2  =", "3,113198061407044e+18");
        verify("962666769 ± ^2  =", "9,267273081368994e+17");
        verify("655572954 ± ^2  =", "4,297758980162861e+17");
        verify("40365827 ± ^2  =", "1629399989393929");
        verify("43877825 ± ^2  =", "1925263526730625");
        verify("1487711523 ± ^2  =", "2,21328557566698e+18");
        verify("1445816833 ± ^2  =", "2,09038631458615e+18");
/////////////////
        ////////////////////////fractional

        verify("1.8251982 ^2  =", "3,33134846928324");
        verify("33.773056 ^2  =", "1140,619311579136");
        verify("25.71647 ^2  =", "661,3368292609");
        verify("411.52374 ^2  =", "169351,7885835876");
        verify("687.5805 ^2  =", "472766,94398025");
        verify("2140.2886 ^2  =", "4580835,29128996");
        verify("4746.5645 ^2  =", "22529874,55266025");
        verify("30668.887 ^2  =", "940580629,818769");
        verify("262.6238 ^2  =", "68971,26032644");
        verify("323350.9 ^2  =", "104555804530,81");
        verify("290181.16 ^2  =", "84205105618,9456");
        verify("1004855.0 ^2  =", "1009733571025");
        verify("3514311.8 ^2  =", "12350387427619,24");

        verify("5.023231 ± ^2  =", "25,232849679361");
        verify("1.4195924 ± ^2  =", "2,01524258213776");
        verify("11.293246 ± ^2  =", "127,537405216516");
        verify("10.489654 ± ^2  =", "110,032841039716");
        verify("954.45984 ± ^2  =", "910993,5861728256");
        verify("776.7382 ± ^2  =", "603322,23133924");
        verify("5528.7935 ± ^2  =", "30567557,56564225");
        verify("9923.175 ± ^2  =", "98469402,080625");
        verify("20789.432 ± ^2  =", "432200482,882624");
        verify("72645.82 ± ^2  =", "5277415163,4724");
        verify("712742.8 ± ^2  =", "508002298951,84");
        verify("611297.25 ± ^2  =", "373684327857,5625");
        verify("7124622.5 ± ^2  =", "50760245767506,25");
        verify("6129638.5 ± ^2  =", "37572468140682,25");
////////
////////fractal < 1
////////
        verify("0.70543385 ^2  =", "0,4976369167258225");
        verify("0.2607565 ^2  =", "0,06799395229225");
        verify("0.29398417 ^2  =", "0,0864266922105889");
        verify("0.42648834 ^2  =", "0,1818923041559556");
        verify("0.07184088 ^2  =", "0,0051611120391744");
        verify("0.33690763 ^2  =", "0,1135067511522169");
        verify("0.02165699 ^2  =", "0,0004690252158601");
        verify("0.8979815 ^2  =", "0,80637077434225");
        verify("0.5547803 ^2  =", "0,30778118126809");
        verify("0.27511513 ^2  =", "0,0756883347549169");
        verify("0.9276535 ^2  =", "0,86054101606225");
        verify("0.11723453 ^2  =", "0,0137439350243209");
        verify("0.84232205 ^2  =", "0,7095064359162025");
        verify("0.32547164 ^2  =", "0,1059317884442896");

        verify("0.9257952 ± ^2  =", "0,85709675234304");
        verify("0.3215679 ± ^2  =", "0,10340591431041");
        verify("0.9516326 ± ^2  =", "0,90560460538276");
        verify("0.133537 ± ^2  =", "0,017832130369");
        verify("0.89768964 ± ^2  =", "0,8058466897633296");
        verify("0.78125507 ± ^2  =", "0,6103594844007049");
        verify("0.25613594 ± ^2  =", "0,0656056197596836");
        verify("0.6356194 ± ^2  =", "0,40401202165636");
        verify("0.058539033 ± ^2  =", "0,0034268183845751");
        verify("0.15412855 ± ^2  =", "0,0237556099251025");
        verify("0.05718136 ± ^2  =", "0,0032697079314496");
        verify("0.62077373 ± ^2  =", "0,3853600238581129");
        verify("0.7924603 ± ^2  =", "0,62799332707609");
        verify("0.12903911 ± ^2  =", "0,0166510919095921");

        //////////////
        //////////////from 1 to OVERFLOW
        //////////////
        verify("10000 ^2 ", "100000000");
        verify(" ^2 ", "1,e+16");
        verify(" ^2 ", "1,e+32");
        verify(" ^2 ", "1,e+64");
        verify(" ^2 ", "1,e+128");
        verify(" ^2 ", "1,e+256");
        verify(" ^2 ", "1,e+512");
        verify(" ^2 ", "1,e+1024");
        verify(" ^2 ", "1,e+2048");
        verify(" ^2 ", "1,e+4096");
        verify(" ^2 ", "1,e+8192");
        verifyCE(" ^2 ", "Переполнение");


        verify(" 9999999 ^2 ", "99999980000001");
        verify(" ^2 ", "9,9999960000006e+27");
        verify(" ^2 ", "9,9999920000028e+55");
        verify(" ^2 ", "9,999984000012e+111");
        verify(" ^2 ", "9,9999680000496e+223");
        verify(" ^2 ", "9,9999360002016e+447");
        verify(" ^2 ", "9,999872000812797e+895");
        verify(" ^2 ", "9,999744003263972e+1791");
        verify(" ^2 ", "9,999488013081378e+3583");
        verify(" ^2 ", "9,998976052375816e+7167");
        verifyCE(" ^2 ", "Переполнение");

        verify(" 9999999999999999999 ^2 ", "9,999999999999998e+31");
        verify(" ^2 ", "9,999999999999996e+63");
        verify(" ^2 ", "9,999999999999992e+127");
        verify(" ^2 ", "9,999999999999984e+255");
        verify(" ^2 ", "9,999999999999968e+511");
        verify(" ^2 ", "9,999999999999936e+1023");
        verify(" ^2 ", "9,999999999999872e+2047");
        verify(" ^2 ", "9,999999999999744e+4095");
        verify(" ^2 ", "9,999999999999488e+8191");
        verify(" ^2 ", "Переполнение");

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////from 1 to 0
///////////////////////////////////////////////////////////////////////
        verify("0,000000000555 =", "0,000000000555");
        verify("^2", "3,08025e-19");
        verify("^2", "9,4879400625e-38");
        verify("^2", "9,00210066295925e-75");
        verify("^2", "8,103781634605138e-149");
        verify("^2", "6,567127678136351e-297");
        verify("^2", "4,312716594094455e-593");
        verify("^2", "1,859952442097767e-1185");
        verify("^2", "3,459423086865449e-2370");
        verify("^2", "1,196760809393767e-4739");
        verify("^2", "1,432236434900824e-9478");
        verify(" ^2 ", "0");

        verify("0,00227 ", "0,00227");
        verify("^2", "0,0000051529");
        verify("^2", "2,655237841e-11");
        verify("^2", "7,050287992278341e-22");
        verify("^2", "4,970656077406416e-43");
        verify("^2", "2,470742183985734e-85");
        verify("^2", "6,104566939726596e-170");
        verify("^2", "3,726573752160294e-339");
        verify("^2", "1,388735193029005e-677");
        verify("^2", "1,928585436357308e-1354");
        verify("^2", "3,719441785329507e-2708");
        verify("^2", "1,383424719445515e-5415");
        verify("^2", "0");

        verify("0,123354 ", "0,123354");
        verify("^2", "0,015216209316");
        verify("^2", "0,0002315330259483");
        verify("^2", "5,360754210478782e-8");
        verify("^2", "2,873768570516599e-15");
        verify("^2", "8,258545796889019e-30");
        verify("^2", "6,820357867931329e-59");
        verify("^2", "4,651728144665278e-117");
        verify("^2", "2,163857473187107e-233");
        verify("^2", "4,682279164267692e-466");
        verify("^2", "2,192373817213536e-931");
        verify("^2", "4,806502954403449e-1862");
        verify("^2", "2,310247065068908e-3723");
        verify("^2", "5,337241501659505e-7446");
        verify("^2", "0");
    }

    @org.junit.Test
    public void test1DiivX() {
//0
        verifyCE("0 /x ", DATA_ZERO_DIVISION);
        verifyCE("50 - 50 = /x ", DATA_ZERO_DIVISION);
/// 0,4 -> min
        verify("0,4 ^2  =", "0,16");
        verify(" /x ", "6,25");
        verify(" /x ", "0,16");
        verify(" ^2  =", "0,0256");
        verify(" /x ", "39,0625");
        verify(" /x ", "0,0256");
        verify(" ^2  =", "0,00065536");
        verify(" /x ", "1525,87890625");
        verify(" /x ", "0,00065536");
        verify(" ^2  =", "0,0000004294967296");
        verify(" ^2  =", "1,844674407370955e-13");
        verify(" /x ", "5421010862427,522");
        verify(" /x ", "1,844674407370955e-13");
        verify(" ^2  =", "3,402823669209385e-26");
        verify(" /x ", "2,938735877055719e+25");
        verify(" /x ", "3,402823669209385e-26");
        verify(" ^2  =", "1,157920892373162e-51");
        verify(" /x ", "8,636168555094445e+50");
        verify(" /x ", "1,157920892373162e-51");
        verify(" ^2  =", "1,34078079299426e-102");
        verify(" /x ", "7,458340731200207e+101");
        verify(" /x ", "1,34078079299426e-102");
        verify(" ^2  =", "1,797693134862316e-204");
        verify(" /x ", "5,562684646268003e+203");
        verifyCE(" ^2  =", "3,094346047382578e+407");

//// 4 -> maxData
        verify(" 4 ^2  =", "16");
        verify(" /x ", "0,0625");
        verify(" /x ", "16");
        verify(" ^2  =", "256");
        verify(" /x ", "0,00390625");
        verify(" /x ", "256");
        verify(" ^2  =", "65536");
        verify(" /x ", "0,0000152587890625");
        verify(" /x ", "65536");
        verify(" ^2  =", "4294967296");
        verify(" ^2  =", "1,844674407370955e+19");
        verify(" /x ", "5,421010862427522e-20");
        verify(" /x ", "1,844674407370955e+19");
        verify(" ^2  =", "3,402823669209385e+38");
        verify(" /x ", "2,938735877055719e-39");
        verify(" /x ", "3,402823669209385e+38");
        verify(" ^2  =", "1,157920892373162e+77");
        verify(" /x ", "8,636168555094445e-78");
        verify(" /x ", "1,157920892373162e+77");
        verify(" ^2  =", "1,34078079299426e+154");
        verify(" /x ", "7,458340731200207e-155");
        verify(" /x ", "1,34078079299426e+154");
        verify(" ^2  =", "1,797693134862316e+308");
        verify(" /x ", "5,562684646268003e-309");
        verify(" /x ", "1,797693134862316e+308");
        verify(" ^2  =", "3,231700607131101e+616");
        verify(" /x ", "3,094346047382578e-617");
        verify(" /x ", "3,231700607131101e+616");
        verify(" ^2  =", "1,044388881413153e+1233");
        verify(" /x ", "9,574977460952185e-1234");
        verify(" /x ", "1,044388881413153e+1233");
        verify(" ^2  =", "1,090748135619416e+2466");
        verify(" /x ", "9,168019337774236e-2467");
        verify(" /x ", "1,090748135619416e+2466");
        verify(" ^2  =", "1,189731495357232e+4932");
        verify(" /x ", "8,405257857780234e-4933");
        verify(" /x ", "1,189731495357232e+4932");
        verify(" ^2  =", "1,415461031044955e+9864");
        verify(" /x ", "7,064835965577636e-9865");
        verify(" /x ", "1,415461031044955e+9864");
        verifyCE(" ^2   ", "Переполнение");
        //////////////////
        ////////////////// -5 -> - maxData

        verify(" 5 ^2 ± =", "-25");
        verify(" /x ", "-0,04");
        verify(" /x ", "-25");
        verify(" ^2 ± =", "-625");
        verify(" /x ", "-0,0016");
        verify(" /x ", "-625");
        verify(" ^2 ± =", "-390625");
        verify(" /x ", "-0,00000256");
        verify(" /x ", "-390625");
        verify(" ^2 ± =", "-152587890625");
        verify(" /x ", "-0,0000000000065536");
        verify(" /x ", "-152587890625");
        verify(" ^2 ± =", "-2,328306436538696e+22");
        verify(" /x ", "-4,294967296e-23");
        verify(" /x ", "-2,328306436538696e+22");
        verify(" ^2 ± =", "-5,421010862427522e+44");
        verify(" /x ", "-1,844674407370955e-45");
        verify(" /x ", "-5,421010862427522e+44");
        verify(" ^2 ± =", "-2,938735877055719e+89");
        verify(" /x ", "-3,402823669209385e-90");
        verify(" /x ", "-2,938735877055719e+89");
        verify(" ^2 ± =", "-8,636168555094445e+178");
        verify(" /x ", "-1,157920892373162e-179");
        verify(" /x ", "-8,636168555094445e+178");
        verify(" ^2 ± =", "-7,458340731200207e+357");
        verify(" /x ", "-1,34078079299426e-358");
        verify(" /x ", "-7,458340731200207e+357");
        verify(" ^2 ± =", "-5,562684646268003e+715");
        verify(" /x ", "-1,797693134862316e-716");
        verify(" /x ", "-5,562684646268003e+715");
        verify(" ^2 ± =", "-3,094346047382578e+1431");
        verify(" /x ", "-3,231700607131101e-1432");
        verify(" /x ", "-3,094346047382578e+1431");
        verify(" ^2 ± =", "-9,574977460952185e+2862");
        verify(" /x ", "-1,044388881413153e-2863");
        verify(" /x ", "-9,574977460952185e+2862");
        verify(" ^2 ± =", "-9,168019337774236e+5725");
        verify(" /x ", "-1,090748135619416e-5726");
        verify(" /x ", "-9,168019337774236e+5725");
//////////
//////// - 0,7 -> - min data
        verify("0,7 ^2 ± =", "-0,49");
        verify(" /x ", "-2,040816326530612");
        verify(" /x ", "-0,49");
        verify(" ^2 ± =", "-0,2401");
        verify(" /x ", "-4,164931278633903");
        verify(" /x ", "-0,2401");
        verify(" ^2 ± =", "-0,05764801");
        verify(" /x ", "-17,34665255574303");
        verify(" /x ", "-0,05764801");
        verify(" ^2 ± =", "-0,0033232930569601");
        verify(" /x ", "-300,9063548896663");
        verify(" /x ", "-0,0033232930569601");
        verify(" ^2 ± =", "-1,104427674243921e-5");
        verify(" /x ", "-90544,63441298583");
        verify(" /x ", "-1,104427674243921e-5");
        verify(" ^2 ± =", "-1,219760487635836e-10");
        verify(" /x ", "-8198330820,981258");
        verify(" /x ", "-1,219760487635836e-10");
        verify(" ^2 ± =", "-1,487815647197612e-20");
        verify(" /x ", "-6,721262825025122e+19");
        verify(" /x ", "-1,487815647197612e-20");
        verify(" ^2 ± =", "-2,213595400046048e-40");
        verify(" /x ", "-4,517537396306469e+39");
        verify(" /x ", "-2,213595400046048e-40");
        verify(" ^2 ± =", "-4,900004595105024e-80");
        verify(" /x ", "-2,040814412702743e+79");
        verify(" /x ", "-4,900004595105024e-80");
        verify(" ^2 ± =", "-2,401004503205035e-159");
        verify(" /x ", "-4,164923467095241e+158");
        verify(" /x ", "-2,401004503205035e-159");
        verify(" ^2 ± =", "-5,764822624410857e-318");
        verify(" /x ", "-1,734658748676064e+317");
        verify(" /x ", "-5,764822624410857e-318");
        verify(" ^2 ± =", "-3,323317989091928e-635");
        verify(" /x ", "-3,009040974358408e+634");
        verify(" /x ", "-3,323317989091928e-635");
        verify(" ^2 ± =", "-1,104444245662202e-1269");
        verify(" /x ", "-9,054327585367797e+1268");
        verify(" /x ", "-1,104444245662202e-1269");
        verify(" ^2 ± =", "-1,219797091776349e-2538");
        verify(" /x ", "-8,198084802315225e+2537");
        verify(" /x ", "-1,219797091776349e-2538");
        verify(" ^2 ± =", "-1,48790494510604e-5076");
        verify(" /x ", "-6,720859442595186e+5075");
        verify(" /x ", "-1,48790494510604e-5076");


        //subject area
        verify(" 9  /x /x ", "9");
        verify(" 3  /x /x ", "3");
        verify(" 357  /x /x ", "357");
        verify(" 291  /x /x ", "291");
        verify(" 57  /x /x ", "57");
        verify(" 16  /x /x ", "16");
        verify(" 116  /x /x ", "116");
        verify(" 261  /x /x ", "261");
        verify(" 95  /x /x ", "95");
        verify(" 40  /x /x ", "40");
        verify(" 66  /x /x ", "66");
        verify(" 373  /x /x ", "373");
        verify(" 256  /x /x ", "256");
        verifyCE(" 290  /x /x ", "290");
        verify(" 2070043763  /x /x ", "2070043763");
        verify(" 1372903254  /x /x ", "1372903254");
        verify(" 1533023593  /x /x ", "1533023593");
        verify(" 782331047  /x /x ", "782331047");
        verify(" 612268050  /x /x ", "612268050");
        verify(" 720708415  /x /x ", "720708415");
        verify(" 51463804  /x /x ", "51463804");
        verify(" 421771651  /x /x ", "421771651");
        verify(" 328874730  /x /x ", "328874730");
        verify(" 1180771150  /x /x ", "1180771150");
        verify(" 136435686  /x /x ", "136435686");
        verify(" 441433349  /x /x ", "441433349");
        verify(" 1965369482  /x /x ", "1965369482");
        verify(" 1379086232  /x /x ", "1379086232");
        verify(" 509185554  /x /x ", "509185554");
        verify(" 630981563  /x /x ", "630981563");
        verify(" 1214266415  /x /x ", "1214266415");
        verify(" 1987301012  /x /x ", "1987301012");
        verify(" 212199032  /x /x ", "212199032");
        verifyCE(" 1679087073  /x /x ", "1679087073");
///
        verify("0,0000000000005551 ^2 ^2 ^2 ^2 ^2  ^2  ^2 ^2 ^2 MS  0,000000000000001 ^2 ^2 ^2  ^2 ^2  ^2 ^ * MR MS =", "1,312406564211004e-7235");
        verify("- MR - MR - MR - MR  =", "-5,249626256844017e-6275");
        verify(" /x /x ", "-5,249626256844017e-6275");

        verify(" MS  0,00001 ^2 ^2 ^2 ^2 * MR = ", "-5,249626256844017e-6355");
        verifyCE(" /x /x ", "-5,249626256844017e-6355");
    }



    @org.junit.Test
    public void testPeriod() {

        verify(" 1 / 3  =", "0,3333333333333333");//p
        verifyCE("  * 3 =  ", "1");

        verify(" 2 / 3   =", "0,6666666666666666");
        verifyCE(" * 3 =  ", "2");

        verify(" 44 / 33  =", "1,333333333333333");//p
        verify(" * 33 =  ", "44");//p

        verify(" 777 / 999 = ", "0,7777777777777778");//p
        verify(" * 999 =  ", "777");//p

        verify(" 8888 / 9  = ", "987,5555555555556");//p
        verify(" * 9 =  ", "8888");//p

        verify(" 777777777 / 999999 = ", "777,778554778548");//p
        verify(" * 999999 =  ", "777777777");//p

        /////////////////////////////// /x

        verify(" 3 /x  ", "0,3333333333333333");//p
        verify("  /x  ", "3");

        verify(" 999 /x", "0,001001001001001");
        verify("  /x", "999");

        verify(" 1111 /x", "9,000900090009001e-4");
        verify("  /x", "1111");

        verify(" 191919 /x", "5,210531526321e-6");
        verify("  /x", "191919");

        verify(" 77949 /x", "1,282890094805578e-5");
        verify("  /x", "77949");
        ////// ^2

        verify(" 1 / 3 = ", "0,3333333333333333");
        verify(" ^2 ", "0,1111111111111111");
        verify(" √ ", "0,3333333333333333");


        verify(" 777 / 999 = ", "0,7777777777777778");
        verify(" ^2 ", "0,6049382716049383");
        verify(" √ ", "0,7777777777777778");


        verify(" 1 / 1111 = ", "9,000900090009001e-4");
        verify(" ^2 ", "8,101620243032404e-7");
        verify(" √ ", "9,000900090009001e-4");

        verify(" 77949 /x", "1,282890094805578e-5");
        verify(" ^2 ", "0,6049382716049383");
        verify(" √ ", "1,282890094805578e-5");

    }

    @org.junit.Test
    public void testWithOutPeriod() {
        /////// /
        verify( " 2942 /  25697 =  ","0,1144880725376503");
        verifyCE( "  *  25697 =  ","2942");

        verify( " 4585 /  25919 =  ","0,1768972568386126");
        verifyCE( "  *  25919 =  ","4585");

        verify( " 7600 /  15449 =  ","0,4919412259693184");
        verifyCE( "  *  15449 =  ","7600");

        verify( " 303 /  26356 =  ","0,0114964334496889");
        verifyCE( "  *  26356 =  ","303");
        /////// 1/х
        verify(" 17 /x ", "0,0588235294117647");// np
        verify(" /x ", "17");// np

        verify(" 245 /x", "0,0040816326530612");//np
        verify("  /x", "245");

        verify("19999993 /x", "5,000001750000613e-8");//np
        verify("  /x", "19999993");

        verify(" 999995 /x", "1,000005000025e-6");//np
        verify("  /x", "999995");

        verify("9959999993 /x ", "1,004016064962662e-10");//np
        verify("  /x", "9959999993");

        verify("9959999993 /x", "5,000001750000613e-8");//np
        verify("  /x", "9959999993");

        ///////////// ^2
        verify(" 3 √ ", "1,732050807568877");//np
        verify(" ^2 ", "3");//np

        verify(" 67 √ ", "8,18535277187245");//np
        verify(" ^2 ", "67");//np

        verify(" 199 √ ", "14,10673597966588");//np
        verify(" ^2 ", "199");//np

        verify(" 91239 √ ", "302,0579414615679");//np
        verify(" ^2 ", "91239");//np

        verify(" 99993499 √ ", "9999,674944716953");
        verify(" ^2 ", "99993499");

    }


    @org.junit.Test
    public void sqrTest() {
        robotTest.click("CE");


        verify("0,00555 ", "0,00555");
        verify(" √ ", "0,0744983221287567");
        verify(" √ ", "0,2729438076395152");
        verify(" √ ", "0,522440243127877");
        verify(" √ ", "0,7228002788653841");
        verify(" √ ", "0,8501766162776909");


        verify("0,00000000000001 ^2   ", "1,e-28");
        verify(" √ ", "0,00000000000001");
        verify(" √ ", "0,0000001");
        verify(" √ ", "0,0003162277660168");

        verify("0,00000000000066 ^2  MS ", "4,356e-25");
        verify(" √ ", "0,00000000000066");
        verify(" √ ", "8,12403840463596e-7");
        verify(" √ ", "0,000901334477574");
        verify(" √ ", "0,0300222330544215");
        verify(" √ ", "0,1732692501698484");
//        verify("0 √","0");
        verify("1 √", "1");
        verify("16 √", "4");
        verify("25 √", "5");
        verify("49 √", "7");
        verify("8836 √", "94");
        verify("7921 √", "89");
        verify("40401 √", "201");
        verify("401956 √", "634");
        verify("91699776 √", "9576");
        verify("12752041 √", "3571");
        ///

        verify("1.3559818 √  =", "1,164466315528277");
        verify("3.2913609 √  =", "1,814210820163963");
        verify("6.514663 √  =", "2,552383787756065");
        verify("48.632927 √  =", "6,973731210765153");
        verify("454.67517 √  =", "21,32311351561962");
        verify("677.2072 √  =", "26,02320502935793");
        verify("2611.7546 √  =", "51,10532848930726");
        verify("3637.2495 √  =", "60,30961366150508");
        verify("19696.691 √  =", "140,344900156721");
        verify("83948.64 √  =", "289,7389169580089");
        //
        verify("0.2583477 ± √  =", "Введеныневерныеданные");
        verify("1.5143166 ± √  =", "Введеныневерныеданные");
        verify("4.7397995 ± √  =", "Введеныневерныеданные");
        verify("66.44103 ± √  =", "Введеныневерныеданные");
        verify("119.04215 ± √  =", "Введеныневерныеданные");
        verify("856.9645 ± √  =", "Введеныневерныеданные");
        verify("1423423.2135 ± √  =", "Введеныневерныеданные");
        verify("85675645455 ± √  =", "Введеныневерныеданные");
        //
        verify("0.044190705 √  =", "0,210215853350788");
        verify("0.077181816 √  =", "0,2778161550378235");
        verify("0.104622245 √  =", "0,3234536210958226");
        verify("0.22921485 √  =", "0,4787638770834742");
        verify("0.25472873 √  =", "0,504706578122378");
        verify("0.27132148 √  =", "0,5208852848756624");
        verify("0.41711164 √  =", "0,6458418072562352");
        verify("0.4348386 √  =", "0,6594229295376375");
        verify("0.46050024 √  =", "0,6786016799271867");
        verify("0.6392704 √  =", "0,79954386996587");
        verify("0.8759699 √  =", "0,9359326364648259");
        verify("0.8894008 √  =", "0,9430804843702366");
        verify("0.908674 √  =", "0,9532439352023175");
        verify("0.96127874 √  =", "0,9804482342275904");
    }

    @org.junit.Test
    public void exponentTest() {
///////////////////////////////plus minus
        verify("1000000000000000 * 10 = ", "1,e+16");
        verify("1000000000000000 * 9,999999999999999 = ", "9999999999999999");
        verify("1000000000000000 * 10 - 1 =", "9999999999999999");
        verify("1000000000000000 * 10 - 1  + 1 =", "1,e+16");
        verify("999999999999999  + 9000000000000001 =", "1,e+16");
        verify("5000000000000000 + 5000000000000000 =", "1,e+16");
        verify("5000000000000000 + 4999999999999999 =", "9999999999999999");

        verify("0,1 ^2 ^2 ^2 ^2 MS  ", MIN_WITH_OUT_E);
        verifyCE(" ±  + 0,000000000000001 =", "0,0000000000000009");
        verify("0,1 ^2 ^2 ^2 ^2 MS  =", MIN_WITH_OUT_E);
        verify(" ±  + 0,00000000000001 =", "0,0000000000000099");

        verify("9999999999999999 + 0,49999999999999 =", "9999999999999999");
        verify("+ 0,00000000001 =", "1,e+16");


        verify("1000000000000000 * 10 ± = ", "-1,e+16");
        verify("1000000000000000 * 10 ± + 1   - 1 =", "-1,e+16");
        verify("999999999999999 ± - 9000000000000001 =", "-1,e+16");
        verify("1000000000000000 * 10 ± = ", "-1,e+16");
        verify("1000000000000000 * 10  = ", "1,e+16");
        verify("100000000 ^2  =", "1,e+16");
        verify("99999999 ^2  =", "9999999800000001");

        verify("1000000000000000 * 10 - 1 =", "9999999999999999");
        verify("1000000000000000 * 10 - 1  + 1 =", "1,e+16");


        ///division
        verify("1000000000000000 / 0,1 ± = ", "-1,e+16");
        verify("0,000000000000001 / 1 = ", "0,000000000000001");
        verify("0,000000000000001 / 1,000000000000001 = ", "9,99999999999999e-16");

        verify("0,000000000000001 / 1 = ", "0,000000000000001");
        verify("0,000000000000001 / 1,000000000000001 = ", "9,99999999999999e-16");

        verify("1000000000000000 / 0,1 ± = ", "-1,e+16");
        verify("1000000000000000 / 0,1  = ", "1,e+16");
        verify("1000000000000000 / 0,1000000000000001  = ", "9999999999999990");
        verify("1000000000000000 / 0,1000000000000001 ± = ", "-9999999999999990");
        verify("100000000 /  0,00000001 = ", "1,e+16");
        verify("100000000 / 0,0000000100000001  = ", "9999999900000001");

        verify("1000000000000000 / 0,0000001  = ", "1,e+22");
        verify(" / 0,1  = ", "1,e+23");
        verify(" / 0,1  = ", "1,e+24");
        verify(" /  0,0000001 = ", "1,e+31");
        verify(" /  0,0000001 = ", "1,e+38");
        verify(" MS /  0,0000000001  = ", "1,e+48");
        verify(" MS /  0,0000000001  = ", "1,e+58");
        verify(" MS /  0,0000000001  = ", "1,e+68");
        verify(" MS /  0,0000000001  = ", "1,e+78");
        verify(" MS /  0,0000000001  = ", "1,e+88");

        verify("0,0000000000001 / 1000  = ", MIN_WITH_OUT_E);
        verify("/ 0,1 = ", "0,000000000000001");
        verify("0,00000001 / 100000000 = ", MIN_WITH_OUT_E);
        verify("0,000000000000001 / 1 = ", "0,000000000000001");
        verify("0,000000000000001 / 1,000000000000001 = ", "9,99999999999999e-16");
        verifyCE("0,00000001 / 1000000 = ", "0,00000000000001");
        verify("0,00000001 / 10000000 = ", "0,000000000000001");
        verify("/ 10000000 = ", "1,e-22");
        verify("/ 1000000000000000 = ", "1,e-37");

        /////////////////////////////////
/////////////////////////////////*******
        verify("1000000000000000 * 10 ± = ", "-1,e+16");
        verify("1000000000000000 * 10  = ", "1,e+16");
        verify("1000000000000000 * 9,999999999999999  = ", "9999999999999999");
        verify("1000000000000000 * 9,999999999999999 ± = ", "-9999999999999999");
        verify("100000000 * 100000000  = ", "1,e+16");
        verify("100000000 * 100000000  = ", "1,e+16");
        verify("100000000 * 99999999,999999  = ", "9999999999999900");

        verify("1000000000000000 * 10000000  = ", "1,e+22");
        verify(" * 10  = ", "1,e+23");
        verify(" * 10  = ", "1,e+24");
        verify(" * 10000000  = ", "1,e+31");
        verify(" * 10000000  = ", "1,e+38");
        verify(" MS * MR   = ", "1,e+76");
        verify(" MS * MR   = ", "1,e+152");
        verify(" MS * MR   = ", "1,e+304");


        verify("0,0000000000001 * 0,001  = ", MIN_WITH_OUT_E);
        verify("* 10 = ", "0,000000000000001");
        verify("0,00000001 * 0,00000001 = ", MIN_WITH_OUT_E);
        verify("0,00000001 * 0,0000000999999999 = ", "9,99999999e-16");
        verifyCE("0,00000001 * 0,0000001 = ", "0,000000000000001");
        verify("0,00000001 * 0,0000000999999999 = ", "9,99999999e-16");
        verify("0,00000001 * 0,0000001 = ", "0,000000000000001");
        verify("* 0,0000001 = ", "1,e-22");
        verify("* 0,000000000000001 = ", "1,e-37");

    }

    @org.junit.Test
    public void randomOperationsTest() {
        verify(" 455 -  = ", "0");
      //  verifyCE("  4747 -  =  ^2  /  *  *  ^2  =  /  MS  ^2  =  ", TypeOfCalculationException.UNCERTAINTY.getValue().replaceAll(" ", ""));
        verifyCE(" 2415588  ±  MS *  ^2  MS *   =  /  =  MS  ^2  ^2  +  =  ", "2");
        verifyCE(" =  =  =  =  = 222 /  5071101  ±  MS *  =  ", "1,916467364856104e-9");
        verifyCE(" 989  /  =  /  =  ^2  /  ^2  /  +  -  ^2  =  ", "0");
        verifyCE(" 4  ±  /  +  +  +  =  MS *  =  /  ^2  -  /  /  =  ", "1");
        verifyCE(" =  =  12  ±  =  ^2  =  MS *  -  MS  ^2  ^2  ^2  =  ", "-1,848842588950363e+17");
        verifyCE(" 10 MS  ^2    ^2  MR  MS  ^2  *  =  ^2  +  MS  ^2  =  ", "1,00000001e+16");
        verifyCE(" 7940664 *  -  MR  +  -  MR  -  ^2  ^2  MS  ^2  MR  *  =  ", "3,427415598764501e+132");
        verifyCE(" ^2  MR  -  ^2  ^2  4140773.0  ±  ^2  -  5948233.0  ±  +  ^2  -  ^2  =  ", "-1,379961836018269e+530");
        verifyCE(" 57557  * * * * * 4  ^2 =  *  MS *  MS *  *  MR  *  ^2  MS  ^2  +  MS *  =  ", "1,924698208830634e+119");
        verifyCE(" +  2383487  ±  =  -  -  =  MS *  =  3438782  /  =  =  /  =  ", "1");
        verifyCE(" ^2  -  -  9320988  -  *  +  /  =  =  ", "-1,072847642331478e-7");
        verifyCE(" MS *  =  -  =  1343631  ±  MS  ^2  -  =  =  ", "-1805344264161");
        verifyCE(" =  =  ^2  =  =  MS *  -  =  ", "0");
        verifyCE(" +  MR  MS *  +  -  MS  ^2  1118127.0  ±  =  -  -  =  ", "0");

        verifyCE(" -  ^2  =  /  /  MS *  MS *  =  ", "0");
        verifyCE(" -  *  MS *  =  ^2  MS  ^2  ^2  =  =  =  ", "0");
        verifyCE(" 22  +  =   MS *  MS  ^2  +  /  +  /  -  MS *  =  /  =  ", "1");
        verifyCE(" MC ^2  +  -  MR  MS *  *  2001256.0  ±  MS *  ^2  MS *  *  *  =  ", "0");
        verifyCE(" /  7896093.0  ±  =  -  +  *  MS  ^2  =  ^2  *  /  =  ", "Результатнеопределен");
        verifyCE(" MS  ^2  =  3694314.0  ±  MS  ^2  =  -  *  MR  =  /  MS *  MS *  +  =  ", "-1,008396693315677e+20");
        verifyCE(" 7850117.0  /  8327491.0  MS  ^2  /  MR  MS  ^2  =  =  MS *  =  MR  +  =  ", "4,707833482408952e-35");
        verifyCE(" =  *  +  =  0.2541821617262181  +  MS  ^2  +  MS *  MS  ^2  -  MS *  =  ", "0,0010496249133884");
        verifyCE(" -  MS *  ^2  =  =  =  0.1614563491559362  /  ^2  ^2  MS  ^2  =  ", "349634,3583676292");
        verifyCE(" -  0.22019503881747426  /  MS *  *  =  ^2  MS *  /  =  ", "1");
        verifyCE(" -  -  *  +  *  =  *  0.011692695820668342  -  *  -  =  ", "0");
        verifyCE(" -  +  +  ^2  /  ^2  MS *  MS  ^2  /  =  ", "Результатнеопределен");

    }

    @org.junit.Test
    public void combOperationsTest() {

        verifyCE("110254504  -  1375694586  ±  +  1923056805  /  1682908208  ±  /  MR  *  MR  /  178497808  ±  MS  ^2  =  ", "-6,357722223759736e-17");
        verifyCE("1967140386  ±  MS  ^2  5822276  -  MR = MS *  1785617664  ±  +  1729527139  ±  MS  ^2  MR  ^2 +  MR  MS  =  ", "-3459054278");
        verifyCE("650063574  ±  -  444333123  ± = MS *  2101478555  =  MR  -  1515842372  ±  *  MR  ^2 + 1926973375    =  ", "5,545051125234109e+25");
        verifyCE("655176042  ±  +  671888691  ±  +  MR = MS *  898457628  ±  +  824264581  +  MR   =  ", "1,377151524517933e+18");
        verifyCE("250108778  +  966520963  ±  *  MR  = + 1754737114  =    MS  ^2  - MR  =  =  ", "-1,693000756293907e+17");
        verifyCE("989740734  +  270192451  -  1897634977  *  1218721922  ± = MS  ^2 + MR  -  MR = MS *  1074993118  ±   =  ", "0");
        verifyCE("992656301  ±  -  MR  +  MR  *  MR  = / 1490529576  +  1206023259  ±  -  1022591438  / 56656  =  ", "-39335,8990574696");
        verifyCE("1412224921  ±  MS  ^2 =    MS  ^2  + 806856727  ±  ^2 - 1423463860  ±  = *  1510801377  *  MR  ^2  =  ", "2,390222556124668e+82");
        verifyCE("1882723491  /  660360693  +  662349012  ±  =   MS  ^2 + MR  *  MR    =  ", "4,387062099205916e+17");
        verifyCE(" 938515137  *  123   ^2  - 1853895069  MS  ^2  1136859072  ^2 + MR  ^2  - MR   =  ", "0");
        verifyCE(" 1429796942  +  1544015894  ±  -  MR  ^2 = - 805905380  ± * MS *  1105177240   =  ", "-3,79841341434716e+27");
        verifyCE(" 1767574581  -  MR  /  1237420916  +  785657855  ±  = * 1659314879  ±  -  1459519312  ±  =  ", "-3,305080344434878e+18");
        verifyCE(" 1720390767  ±  =  1065257287  MS *  2014752309  MS  ^2  MR  ^2  MR  =  MR  MS  ^2  =  ", "4,059226866620831e+18");
        verifyCE(" 1955868659  ±  *  MR  +  MR  *  MR  MS  ^2 + MR = ^2  =  ", "1,623690746849808e+19");
        verifyCE(" 48814184  ±  *  1974336576  =  - 1452642560  ±  MS *  MR ^2 =  MS  ^2  - MR   =  ", "0");
        verifyCE(" 0.8474207486572152  MS  ^2 *   MR  ^2 - MR  =   MS *  0.529757301614577  ^2  =  ", "0");
        verifyCE(" 0.104501358820418 * MR = - 0.1584944422867557  /  0.9144442429453327  ^2 = MS  /  29.8033321659748052  *  0.40936198188148476   =  ", "-0,002603408157038");
        verifyCE(" 0.7959022228282346  /  MR  =   MS  ^2 - 0.4703927131733676  =  0.41636778864998836  /  =  ", "1");
        verifyCE(" 0.7150487731665977   *  0.560917549757856  MS *  MR  ^2  +  MR  -  12.22480608633003085 =  ", "-11,5376962671818");
        verifyCE(" 0.16062555519549282  = +  0.08183133913151885  = * 0.7037617944844042  /  0.9114896438780198  ^2  0.9506384071028997  =  =  ", "0,9193328197964476");
        verifyCE(" 0.7899549051104471  +  MR  ^2  MR  *  0.8366608442228054  =  MR  -  0.325752903804837  -  0.34922612099381745  ^2  =  ", "0,1132057623686306");
        verifyCE(" 2119456228  ±  /  848479028  ± MS  *  MR  MS *  MR  /  69619218  MS  ^2 + MR  +  1042356884  =  =  ", "2154333357,02851");
        verifyCE(" 1209292167  ±  MS  ^2 *  375122756  ±  =  MS  ^2  - MR  = MS   ^2  MR  - 20  =  ", "-20");
        verifyCE(" 403293825  ±  ^2  - 675237187  ±  *  MR = MS *  251247100  ±  -  1606927274  ±  +  211756896   =  ", "1818684170");
        verifyCE(" 657799531  ±  ^2 - 917606823  ±  +  172711901 = MS *  MR  = ^2 + 1547151854  ±  *  346081816  ±  ^2  - 113856  =  ", "4,19861489705148e+87");

        verifyCE("828886726  ^2  MS + MR = MS  ^2 * 772680693  MS *  MR  ^2  + 929613244  -  MR = ^2 *  929525515  MS =  ", "0");
        verifyCE("MR  ^2 * 250445926  = MS  + 12312355  MS *  MR  -  999   =  ", "2,664266911963542e+33");
        verifyCE("MR  ^2   MS  ^2 * 169680418 *  793527354  +  972536480  =  MS    *  MR   =  ", "9,574504033835818e+90");
        verifyCE("MR * MR * MR * 123123 = MS  ", "3,647653850589245e+141");
        verifyCE("MR * 991239 * MR  + 1255343312  =  ", "1,318881019168376e+289");
        verifyCE("* 991239 * 12039123 * 12039120391 * 21939  + 1255343312 = MS   ", "1255343312");
        verifyCE("MR * 12123213 ^2 ^2 =  ", "2,711648890795022e+37");
        verifyCE("^2 ^2 =  ", "0");
        verifyCE("^2  MS   ", "0");
        verifyCE("MR  * 12938 - 123 = ^2 = ", "15006");
    }


    @org.junit.Test
    public void percentLogic() {
////////////// zero
        verify("0 %", "0");
        verify("0,1239123 %", "0");
        verify("256123992 %", "0");
        verify("118433451± %", "0");
        verify("1 % 2 % 3 %", "0");
        verify("11233 % 2454 % 33453434 %", "0");
        verify("11233 % 2454 % 33453434 %", "0");
        verify("62, %", "0");
        verifyCE("8 ± % ", "0");
        verifyCE("8457878 ± % ", "0");
        verify("12312344 % % % % %", "0");
        verify("866 % % % % %", "0");
        verify("0.912399123 % % % % %", "0");
        verify("0.0000001263 ± % % % % %", "0");
        /////////////////////////
        ///////////////////////// + %
        verify(" 4 + %  ", "0,16");
        verify(" %  ", "0,0064");
        verify(" %  ", "0,000256");
        verify(" %  ", "0,00001024");
        verify(" %  ", "0,0000004096");
        verify(" =  ", "4,0000004096");
        verify(" =  ", "4,0000008192");
        verifyCE(" =  ", "4,0000012288");

        verify(" 20 ±  + %  ", "4");
        verify(" %  ", "-0,8");
        verify(" %  ", "0,16");
        verify(" %  ", "-0,032");
        verify(" %  ", "0,0064");
        verify(" =  ", "-19,9936");
        verify(" =  ", "-19,9872");
        verifyCE(" =  ", "-19,9808");

        verify(" 0,5 ±  + %  ", "0,0025");
        verify(" %  ", "-0,0000125");
        verify(" %  ", "0,0000000625");
        verify(" %  ", "-0,0000000003125");
        verify(" =  ", "-0,5000000003125");
        verify(" =  ", "-0,500000000625");
        verifyCE(" =  ", "-0,5000000009375");

        verify(" 0,0145 ±  + %  ", "0,0000021025");
        verify(" %  ", "-0,0000000003048625");
        verify(" %  ", "4,42050625e-14");
        verify(" %  ", "-6,4097340625e-18");
        verify(" %  ", "9,294114390625e-22");
        verify(" =  ", "-0,0145");
        verify(" =  ", "-0,0145");
        verifyCE(" =  ", "-0,0145");
        //////////////////////


        ////////////////////
        ////////////////////- %
        verifyCE("  0 - %  ", "0");
        verify(" 10000000 - %  ", "1000000000000");
        verify(" %  ", "1,e+17");
        verify(" %  ", "1,e+22");
        verify(" %  ", "1,e+27");
        verify(" %  ", "1,e+32");
        verify(" =  ", "-1,e+32");
        verify(" =  ", "-2,e+32");
        verifyCE(" =  ", "-3,e+32");

        verify(" 10000 ±  - %  ", "1000000");
        verify(" %  ", "-100000000");
        verify(" %  ", "10000000000");
        verify(" %  ", "-1000000000000");
        verify(" %  ", "100000000000000");
        verify(" =  ", "-100000000010000,0");
        verify(" =  ", "-200000000010000,0");
        verifyCE(" =  ", "-300000000010000,0");

        verify(" 0,0000099999 ±  - %  ", "9,999800001e-13");
        verify(" %  ", "-9,99970000299999e-20");
        verify(" %  ", "9,99960000599996e-27");
        verify(" %  ", "-9,9995000099999e-34");
        verify(" =  ", "-0,0000099999");
        verify(" =  ", "-0,0000099999");
        verifyCE(" =  ", "-0,0000099999");

        verify(" 0,000000995 ±  - %  ", "9,90025e-15");
        verify(" %  ", "-9,85074875e-23");
        verify(" %  ", "9,80149500625e-31");
        verify(" %  ", "-9,75248753121875e-39");
        verify(" %  ", "9,703725093562656e-47");
        verify(" =  ", "-0,000000995");
        verify(" =  ", "-0,000000995");
        verifyCE(" =  ", "-0,000000995");


        ///////////////* %
        ///////////////
        verifyCE("0 / % ", "0");
        verify(" 10000002 * %  ", "100000,02");
        verify(" %  ", "1000,0002");
        verify(" %  ", "10,000002");
        verify(" %  ", "0,10000002");
        verify(" %  ", "0,0010000002");
        verify(" =  ", "10000,0040000004");
        verify(" =  ", "10,0000060000012");
        verifyCE(" =  ", "0,0100000080000024");

        verify(" 100099 ±  * %  ", "-1000,99");
        verify(" %  ", "-10,0099");
        verify(" %  ", "-0,100099");
        verify(" %  ", "-0,00100099");
        verify(" %  ", "-0,0000100099");
        verify(" =  ", "1,0019809801");
        verify(" =  ", "-1,002972941270299e-5");
        verifyCE(" =  ", "1,003965884482157e-10");

        verify(" 0,00444444 ±  * %  ", "-0,0000444444");
        verify(" %  ", "-0,000000444444");
        verify(" %  ", "-0,00000000444444");
        verify(" %  ", "-0,0000000000444444");
        verify(" =  ", "1,97530469136e-13");
        verify(" =  ", "-8,779123182468038e-24");
        verifyCE(" =  ", "3,901828623708825e-34");

        verify(" 0,0001234 ±  * %  ", "-0,000001234");
        verify(" %  ", "-0,00000001234");
        verify(" %  ", "-0,0000000001234");
        verify(" %  ", "-0,000000000001234");
        verify(" %  ", "-0,00000000000001234");
        verify(" =  ", "1,522756e-18");
        verify(" =  ", "-1,879080904e-32");
        verifyCE(" =  ", "2,318785835536e-46");
///////////////
/////////////// / %
        verifyCE("0 / % ", "0");

        verify(" 823819 / %  ", "8238,19");
        verify(" %  ", "82,3819");
        verify(" %  ", "0,823819");
        verify(" %  ", "0,00823819");
        verify(" %  ", "0,0000823819");
        verify(" =  ", "10000000000");
        verify(" =  ", "121385886948468");
        verifyCE(" =  ", "1,473453355026627e+18");

        verify(" 10012304 ±  / %  ", "-100123,04");
        verify(" %  ", "-1001,2304");
        verify(" %  ", "-10,012304");
        verify(" %  ", "-0,10012304");
        verify(" %  ", "-0,0010012304");
        verify(" =  ", "10000000000");
        verify(" =  ", "-9987711120237,66");
        verifyCE(" =  ", "9975437342131900");

        verify(" 0,0292 ±  / %  ", "-0,000292");
        verify(" %  ", "-0,00000292");
        verify(" %  ", "-0,0000000292");
        verify(" %  ", "-0,000000000292");
        verify(" =  ", "100000000");
        verify(" =  ", "-3,424657534246575e+17");
        verifyCE(" =  ", "1,172827922687183e+27");

        verify(" 0,049 ±  / %  ", "-0,00049");
        verify(" %  ", "-0,0000049");
        verify(" %  ", "-0,000000049");
        verify(" %  ", "-0,00000000049");
        verify(" %  ", "-0,0000000000049");
        verify(" =  ", "10000000000");
        verify(" =  ", "-2,040816326530612e+21");
        verifyCE(" =  ", "4,164931278633903e+32");

/////////////////2 Params
/////////////////
///////////////// + % =
        verify(" 58 +  123 % = ", "129,34");
        verify(" =  ", "200,68");
        verifyCE(" =  ", "272,02");

        verify(" 58 +  123 ±  % =  ", "-13,34");
        verify(" =  ", "-84,68");
        verifyCE(" =  ", "-156,02");

        verify(" 20 ± + 80  %  = ", "-36");
        verify(" =  ", "-52");
        verifyCE(" =  ", "-68");

        verify(" 20 ± + 80 ± % = ", "-4");
        verify(" =  ", "12");
        verifyCE(" =  ", "28");

        verify(" 0,5  + 50 % =  ", "0,75");
        verify(" =  ", "1");
        verifyCE(" =  ", "1,25");

        verify(" 0,5  + 50 ± % =  ", "0,25");
        verify(" =  ", "0");
        verifyCE(" =  ", "-0,25");

        verify(" 0,2020 ± + 24 % =  ", "-0,25048");
        verify(" =  ", "-0,29896");
        verifyCE(" =  ", "-0,34744");

        verify(" 0,2020 ± + 24 % =  ", "-0,25048");
        verify(" =  ", "-0,29896");
        verifyCE(" =  ", "-0,34744");
/////////////////
/////////////////
///////////////// - % =
        verify(" 2323 -  12 % = ", "2044,24");
        verify(" =  ", "1765,48");
        verifyCE(" =  ", "1486,72");

        verify(" 551 -  24 ±  % =  ", "683,24");
        verify(" =  ", "815,48");
        verifyCE(" =  ", "947,72");

        verify(" 123123 ± - 2  %  = ", "-120660,54");
        verify(" =  ", "-118198,08");
        verifyCE(" =  ", "-115735,62");

        verify(" 237237 ± - 44 ± % = ", "-341621,28");
        verify(" =  ", "-446005,56");
        verifyCE(" =  ", "-550389,84");

        verify(" 0,8123  - 22 % =  ", "0,633594");
        verify(" =  ", "0,454888");
        verifyCE(" =  ", "0,276182");

        verify(" 0,8123  - 22 ± % =  ", "0,991006");
        verify(" =  ", "1,169712");
        verifyCE(" =  ", "1,348418");

        verify(" 0,04042 ± - 52 % =  ", "-0,0194016");
        verify(" =  ", "0,0016168");
        verifyCE(" =  ", "0,0226352");

        verify(" 0,04042 ± - 52 ± % =  ", "-0,0614384");
        verify(" =  ", "-0,0824568");
        verifyCE(" =  ", "-0,1034752");
///////////////// * % =
///////////////// * % =
///////////////// * % =
        verify(" 5555 *  33 % = ", "1833,15");
        verify(" =  ", "604,9395");
        verifyCE(" =  ", "199,630035");

        verify(" 5555 *  33 ±  % =  ", "-1833,15");
        verify(" =  ", "604,9395");
        verifyCE(" =  ", "-199,630035");

        verify(" 1234 ± * 23  %  = ", "-283,82");
        verify(" =  ", "-65,2786");
        verifyCE(" =  ", "-15,014078");

        verify(" 1232 ± * 1234 ± % = ", "15202,88");
        verify(" =  ", "-187603,5392");
        verifyCE(" =  ", "2315027,673728");

        verify(" 0,214  * 22 % =  ", "0,04708");
        verify(" =  ", "0,0103576");
        verifyCE(" =  ", "0,002278672");

        verify(" 0,214 * 22 ± % =  ", "-0,04708");
        verify(" =  ", "0,0103576");
        verifyCE(" =  ", "-0,002278672");

        verify(" 0,5555213 ± * 123 % =  ", "-0,683291199");
        verify(" =  ", "-0,84044817477");
        verifyCE(" =  ", "-1,0337512549671");

        verify(" 0,123512 ± * 3 ± % =  ", "0,00370536");
        verify(" =  ", "-0,0001111608");
        verifyCE(" =  ", "0,000003334824");
///////////////// / % =
///////////////// / % =
///////////////// / % =
        verify(" 1111 /  40 % = ", "2777,5");
        verify(" =  ", "6943,75");
        verifyCE(" =  ", "17359,375");

        verify(" 1111 /  40 ±  % =  ", "-2777,5");
        verify(" =  ", "6943,75");
        verifyCE(" =  ", "-17359,375");

        verify(" 1234 ± / 23  %  = ", "-5365,217391304348");
        verify(" =  ", "-23327,03213610586");
        verifyCE(" =  ", "-101421,8788526342");

        verify(" 1232 ± / 1234 ± % = ", "99,83792544570502");
        verify(" =  ", "-8,090593634173827");
        verifyCE(" =  ", "0,6556396786202453");

        verify(" 0,555  / 22 % =  ", "2,522727272727273");
        verify(" =  ", "11,46694214876033");
        verifyCE(" =  ", "52,12246431254696");

        verify(" 0,555 / 22 ± % =  ", "-2,522727272727273");
        verify(" =  ", "11,46694214876033");
        verifyCE(" =  ", "-52,12246431254696");

        verify(" 0,6666 ± / 123 % =  ", "-0,5419512195121951");
        verify(" =  ", "-0,4406107475708903");
        verifyCE(" =  ", "-0,3582201199763336");

        verify(" 0,6662 ± / 3 ± % =  ", "22,20666666666667");
        verify(" =  ", "-740,2222222222222");
        verifyCE(" =  ", "24674,07407407407");

/////////////////////////////////
/////////////////////////////////  fractional percentage
        verify(" 1111 /  0.5 % = ", "222200");
        verifyCE(" =  ", "44440000");

        verify(" 1111 /  0.5 ± % = ", "-222200");
        verifyCE(" =  ", "44440000");

        verify(" 234234 +  0.00025 % = ", "234234,585585");
        verifyCE(" =  ", "234235,17117");

        verify(" 234234 +  0.00025 ± % = ", "234233,414415");
        verifyCE(" =  ", "234232,82883");
//////////////
//////////////Max-MIN
        verify(MAX_VALUE_DIV10_MS + " MR ","1,e+9999" );
        verify(MAX_VALUE_DIV10_MS + " MR + %", "Переполнение");
        verifyCE(" % ", "0");
        verify(MAX_VALUE_DIV10_MS + " MR - %", "Переполнение");
        verifyCE(" % ", "0");
        verify(MAX_VALUE_DIV10_MS + " MR * %", "1,e+9997");
        verifyCE(" % ", "1,e+9995");
        verify(MAX_VALUE_DIV10_MS + " MR / %", "1,e+9997");
        verifyCE(" % ", "1,e+9995");

        verify(MIN_VALUE_MS + "  MR  ", "1,e-9999");
        verify("  * 10000000 =   ", "1,e-9992");
        verifyCE(" + % ", OVERFLOW);
        verify(MAX_VALUE_DIV10_MS + "  MR  ", "1,e+9999");
        verify("  / 10000000 =   ", "1,e+9992");
        verifyCE(" - % ", OVERFLOW);
        verify(MAX_VALUE_DIV10_MS + "  MR  ", "1,e+9999");
        verify("  / 10000000 =   ", "1,e+9992");
        verifyCE(" / % ", OVERFLOW);
        verify(MAX_VALUE_DIV10_MS + "  MR  ", "1,e+9999");
        verify("  / 10000000 =   ", "1,e+9992");
        verifyCE(" * % ", OVERFLOW);
//////////////
        //////////////////////////////
        ////////////////////////////// different combination in subject area
        verifyCE("866 / % % % % %", "0,0000000866");
        verifyCE("49 - ^2  %", "1176,49");
        verifyCE("64 / √ %", "0,08");
        verifyCE("564 - %", "3180,96");
        verifyCE("6522456 - %", "425424322719,36");
        verifyCE("55 / %", "0,55");
        verifyCE("1567 / %", "15,67");
        verifyCE("73 = %", "0");
        verifyCE("53 + 12 = % ", "42,25");
        verifyCE("53 / 12 = %", "0,0441666666666667");
        verifyCE("8 * 6 %", "0,06");
        verifyCE("856 - 30 % ", "256,8");
        verifyCE("8 * 6 ^2 % ", "0,36");
    }

    @org.junit.Test
    public void inputTest() {
        robotTest.clickSelector(RobotTest.BUTTON_C);

        checkLabel("0");
        robotTest.click("1");
        checkLabel("1");
        robotTest.click("1");
        checkLabel("11");
        robotTest.click("2");
        checkLabel("112");
        robotTest.click("3");
        checkLabel("1123");
        robotTest.click("4");
        checkLabel("11234");
        robotTest.click("5");
        checkLabel("112345");
        robotTest.click("6");
        checkLabel("1123456");
        robotTest.click("7");
        checkLabel("11234567");
        robotTest.click("8");
        checkLabel("112345678");
        robotTest.click("9");
        checkLabel("1123456789");
        robotTest.click("10");
        checkLabel("112345678910");
        robotTest.click("12");
        checkLabel("11234567891012");
        robotTest.click("97");
        checkLabel("1123456789101297");
        //
        robotTest.click("23");
        checkLabel("1123456789101297");
        robotTest.click("1234");
        checkLabel("1123456789101297");
        robotTest.click("54");
        checkLabel("1123456789101297");
        robotTest.click("11");
        checkLabel("1123456789101297");
        robotTest.click("0");
        checkLabel("1123456789101297");
        robotTest.click(",");
        checkLabel("1123456789101297,");
        robotTest.click("2");
        checkLabel("1123456789101297,");
        //
        robotTest.clickSelector(RobotTest.BUTTON_C);
        checkLabel("0");
        //////////////////
        robotTest.click("0");
        checkLabel("0");
        robotTest.click(",");
        checkLabel("0,");
        robotTest.click("2");
        checkLabel("0,2");
        robotTest.click("4");
        checkLabel("0,24");
        robotTest.click("7");
        checkLabel("0,247");
        robotTest.click("3");
        checkLabel("0,2473");
        robotTest.click("12");
        checkLabel("0,247312");
        robotTest.click("7");
        checkLabel("0,2473127");
        robotTest.click("999");
        checkLabel("0,2473127999");
        robotTest.click("4444");
        checkLabel("0,24731279994444");
        robotTest.click("667");
        checkLabel("0,2473127999444466");
        robotTest.clickSelector(RobotTest.BUTTON_C);


        robotTest.click("789456123,0");
        checkLabel("789456123,0");
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        checkLabel("789456123,");
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        checkLabel("789456123");
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        checkLabel("78945612");
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        checkLabel("7894561");
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        checkLabel("7");
        robotTest.clickSelector(RobotTest.BUTTON_DELL);
        checkLabel("0");
        FXTestUtils.awaitEvents();
    }


    @org.junit.Test
    public void MemoryTest() {
        robotTest.clickSelector(RobotTest.BUTTON_C);
        randomMemoryIntegerTest();
        randomMemoryDoubleTest();
    }

    public void randomMemoryIntegerTest() {
        Random r = new Random();
        String data;
        for (int i = 0; i < 10; i++) {
            int first = r.nextInt();
            int second = Math.abs(r.nextInt()) % 100000;
            data = "" + Math.abs(first) + second;
            robotTest.click(data);
            if (first < 0) {
                robotTest.clickSelector(RobotTest.BUTTON_PLUS_MINUS);
                data = "-" + data;
            }
            checkLabel(data);
            robotTest.clickSelector(RobotTest.BUTTON_MS);
            robotTest.clickSelector(RobotTest.BUTTON_C);
            checkLabel("0");
            robotTest.clickSelector(RobotTest.BUTTON_MR);
            checkLabel(data);
            robotTest.clickSelector(RobotTest.BUTTON_CE);
            checkLabel("0");

            FXTestUtils.awaitEvents();
            robotTest.clickSelector(RobotTest.BUTTON_MC);
        }
    }

    public void randomMemoryDoubleTest() {
        Random r = new Random();
        String data;
        for (int i = 0; i < 10; i++) {
            int first = r.nextInt();
            data = "" + Math.abs(first);
            int second = Math.abs(r.nextInt()) % (int) Math.pow(10, 16 - (data.replaceAll("-", "").length()));
            data = "" + Math.abs(first) + "," + second;
            robotTest.click(data);
            if (first < 0) {
                robotTest.clickSelector(RobotTest.BUTTON_PLUS_MINUS);
                data = "-" + data;
            }

            checkLabel(data);
            robotTest.clickSelector(RobotTest.BUTTON_MS);
            robotTest.clickSelector(RobotTest.BUTTON_CE);
            checkLabel("0");
            robotTest.clickSelector(RobotTest.BUTTON_MR);
            while (data.charAt(data.length() - 1) == '0') {
                data = data.substring(0, data.length() - 1);
            }

            checkLabel(data);
            robotTest.clickSelector(RobotTest.BUTTON_CE);
            checkLabel("0");
            FXTestUtils.awaitEvents();
            robotTest.clickSelector(RobotTest.BUTTON_MC);
        }
    }

    @Override
    public void start(Stage stage) throws Exception {
        robotTest = new RobotTest(stage);
        stage.setX(470);
        stage.setY(150);
        stage.show();
        FXTestUtils.awaitEvents();
    }


    public void checkLabel(String data) {
        FXTestUtils.awaitEvents();
        Assert.assertEquals(data.replaceAll("\\.", ","), robotTest.getTextFromLabel());
    }

    public void verify(String input, String output) {
        robotTest.click(input);
        FXTestUtils.awaitEvents();
            checkLabel(output);

    }


    public void verifyCE(String input, String output) {
        robotTest.click(input);
        FXTestUtils.awaitEvents();
        checkLabel(output);
        robotTest.click("CE");
    }


}
